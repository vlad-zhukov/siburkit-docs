import{a as s,j as o,F as A,r as v}from"./index.ee878a4d.js";import{_ as m}from"./index.54322e99.js";import{_ as F}from"./index.37737cc9.js";import{_ as i}from"./index.a18239e2.js";import{d as C,_ as D}from"./Popover.module.3b751a17.js";import{P as E}from"./PackageInfo.73d54079.js";import"./Columns.50a58446.js";const f="@siburkit/toaster",R="1.0.1",l=C({placement:"bottom-right"});function M(r={}){const{wrapper:c}=r.components||{};return c?s(c,{...r,children:s(y,{})}):y();function y(){const t=Object.assign({p:"p",a:"a",code:"code",h2:"h2",div:"div"},r.components),{CodePreview:p}=t;return p||d("CodePreview",!0),l||d("toaster",!1),l.Provider||d("toaster.Provider",!0),o(A,{children:[s(E,{name:f,version:R}),`
`,`
`,s(l.Provider,{}),`
`,o(t.p,{children:["\u0422\u043E\u0441\u0442\u044B \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u044E\u0442 ",s(t.a,{href:"/layers",children:"\u0441\u043B\u043E\u0438"}),`, \u043F\u043E\u044D\u0442\u043E\u043C\u0443 \u043F\u0435\u0440\u0435\u0434 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u043C \u043D\u0435\u043E\u0431\u0445\u043E\u0434\u0438\u043C\u043E
\u043E\u0431\u0435\u0440\u043D\u0443\u0442\u044C \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0432 `,s(t.code,{children:"<LayersManager>"})," (\u0435\u0441\u043B\u0438 \u0432\u044B \u0435\u0449\u0451 \u044D\u0442\u043E\u0433\u043E \u043D\u0435 \u0441\u0434\u0435\u043B\u0430\u043B\u0438)."]}),`
`,o(t.p,{children:[`\u0414\u043B\u044F \u043F\u043E\u043A\u0430\u0437\u0430 \u0442\u043E\u0441\u0442\u043E\u0432 \u0441\u043D\u0430\u0447\u0430\u043B\u0430 \u043D\u0443\u0436\u043D\u043E \u0441\u043E\u0437\u0434\u0430\u0442\u044C \xAB\u0442\u043E\u0441\u0442\u0435\u0440\xBB \u0441 \u043F\u043E\u043C\u043E\u0449\u044C\u044E \u0444\u0443\u043D\u043A\u0446\u0438\u0438
`,s(t.code,{children:"createToaster"}),", \u043A\u043E\u0442\u043E\u0440\u0430\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043E\u0431\u044F\u0437\u0430\u0442\u0435\u043B\u044C\u043D\u044B\u0439 \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440 ",s(t.code,{children:"placement"}),`, \u0438
\u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 React \u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442 `,s(t.code,{children:"Provider"}),", \u0444\u0443\u043D\u043A\u0446\u0438\u0438 ",s(t.code,{children:"notify"})," \u0438 ",s(t.code,{children:"dismiss"}),"."]}),`
`,o(t.p,{children:[`\u0420\u0435\u043A\u043E\u043C\u0435\u043D\u0434\u0443\u0435\u0442\u0441\u044F \u043D\u0435 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C \u043E\u0434\u0438\u043D \u0433\u043B\u043E\u0431\u0430\u043B\u044C\u043D\u044B\u0439 \u0442\u043E\u0441\u0442\u0435\u0440 \u0434\u043B\u044F \u0432\u0441\u0435\u0433\u043E \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F, \u0430
\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C \u0440\u0430\u0437\u043D\u044B\u0435 \u0432 \u0440\u0430\u0437\u043B\u0438\u0447\u043D\u044B\u0445 \u043A\u043E\u043D\u0442\u0435\u043A\u0441\u0442\u0430\u0445. \u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043C\u043E\u0441\u0442\u0438 \u043E\u0442 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \u0440\u0430\u0437\u043D\u044B\u043C\u0438
\u043A\u043E\u043D\u0442\u0435\u043A\u0441\u0442\u0430\u043C\u0438 \u043C\u043E\u0433\u0443\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044C\u0441\u044F \u0440\u0430\u0437\u0434\u0435\u043B\u044B \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F, \u043E\u0442\u0434\u0435\u043B\u044C\u043D\u044B\u0435 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u044B \u0438\u043B\u0438 \u0434\u0430\u0436\u0435
`,s(t.a,{href:"/side-page",children:"\u0441\u0430\u0439\u0434\u043F\u0435\u0439\u0434\u0436"}),"."]}),`
`,s(p,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line dim'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/button&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line highlight'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) function createToaster(toasterOpts: ToasterOptions): {&#10;    Provider: React_2.NamedExoticComponent&lt;{&#10;        children?: undefined;&#10;    }>;&#10;    notify: (options: ToastOptions) => string;&#10;    dismiss: (toastId: string) => void;&#10;}&#10;import createToaster' >createToaster</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/toaster&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line dim'>&nbsp;</div><div class='line highlight'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const toaster: {&#10;    Provider: React.NamedExoticComponent&lt;{&#10;        children?: undefined;&#10;    }>;&#10;    notify: (options: ToastOptions) => string;&#10;    dismiss: (toastId: string) => void;&#10;}' >toaster</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF"><data-lsp lsp='(alias) createToaster(toasterOpts: ToasterOptions): {&#10;    Provider: React.NamedExoticComponent&lt;{&#10;        children?: undefined;&#10;    }>;&#10;    notify: (options: ToastOptions) => string;&#10;    dismiss: (toastId: string) => void;&#10;}&#10;import createToaster' >createToaster</data-lsp></span><span style="color: #ABB2BF">({ </span><span style="color: #E06C75"><data-lsp lsp='(property) ToasterOptions.placement: "top-right" | "bottom-right" | "top-center"' >placement</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;top-right&apos;</span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(property) ToasterOptions.offset?: number' >offset</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">56</span><span style="color: #ABB2BF"> });</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line dim'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line dim'><span style="color: #ABB2BF">        &lt;&gt;</span></div><div class='line dim'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line dim'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(property) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line highlight'><span style="color: #ABB2BF">                    </span><span style="color: #E5C07B"><data-lsp lsp='const toaster: {&#10;    Provider: React.NamedExoticComponent&lt;{&#10;        children?: undefined;&#10;    }>;&#10;    notify: (options: ToastOptions) => string;&#10;    dismiss: (toastId: string) => void;&#10;}' >toaster</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) notify: (options: ToastOptions) => string' >notify</data-lsp></span><span style="color: #ABB2BF">({ </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.title: string' >title</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;\u041F\u0440\u0438\u0432\u0435\u0442, \u043C\u0438\u0440!&apos;</span><span style="color: #ABB2BF"> });</span></div><div class='line dim'><span style="color: #ABB2BF">                }</span><span style="color: #C678DD">}</span></div><div class='line dim'><span style="color: #ABB2BF">            &gt;</span></div><div class='line dim'><span style="color: #ABB2BF">                \u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u0442\u043E\u0441\u0442</span></div><div class='line dim'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line dim'>&nbsp;</div><div class='line highlight'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='const toaster: {&#10;    Provider: React.NamedExoticComponent&lt;{&#10;        children?: undefined;&#10;    }>;&#10;    notify: (options: ToastOptions) => string;&#10;    dismiss: (toastId: string) => void;&#10;}' >toaster</data-lsp>.<data-lsp lsp='(property) Provider: React.NamedExoticComponent&lt;{&#10;    children?: undefined;&#10;}>' >Provider</data-lsp></span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line dim'><span style="color: #ABB2BF">        &lt;/&gt;</span></div><div class='line dim'><span style="color: #ABB2BF">    );</span></div><div class='line dim'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{Button:n}=i,{createToaster:a}=D,e=a({placement:"top-right",offset:56});return()=>o(A,{children:[s(n,{onClick:()=>{e.notify({title:"\u041F\u0440\u0438\u0432\u0435\u0442, \u043C\u0438\u0440!"})},children:"\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u0442\u043E\u0441\u0442"}),s(e.Provider,{})]})}}),`
`,o(t.p,{children:["\u041F\u043E\u043C\u0438\u043C\u043E \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u0430 ",s(t.code,{children:"placement"})," \u043C\u043E\u0436\u043D\u043E \u0442\u0430\u043A\u0436\u0435 \u043F\u0435\u0440\u0435\u0434\u0430\u0442\u044C \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440 ",s(t.code,{children:"offset"}),`, \u043A\u043E\u0442\u043E\u0440\u044B\u0439
\u0438\u0437\u043C\u0435\u043D\u044F\u0435\u0442 \u043E\u0442\u0441\u0442\u0443\u043F \u0442\u043E\u0441\u0442\u0435\u0440\u0430 \u043E\u0442 \u0432\u0435\u0440\u0445\u043D\u0435\u0433\u043E \u0438\u043B\u0438 \u043D\u0438\u0436\u043D\u0435\u0433\u043E \u043A\u0440\u0430\u044F \u044D\u043A\u0440\u0430\u043D\u0430. \u042D\u0442\u043E \u043F\u043E\u043B\u0435\u0437\u043D\u043E \u0432 \u0442\u0435\u0445
\u0441\u043B\u0443\u0447\u0430\u044F\u0445, \u043A\u043E\u0433\u0434\u0430 \u043A\u0440\u0430\u0439 \u044D\u043A\u0440\u0430\u043D\u0430 \u0443\u0436\u0435 \xAB\u0437\u0430\u043D\u044F\u0442\xBB \u0434\u0440\u0443\u0433\u0438\u043C \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u043C (\u043A\u0430\u043A, \u043D\u0430\u043F\u0440\u0438\u043C\u0435\u0440, \u043D\u0430 \u044D\u0442\u043E\u043C
\u0441\u0430\u0439\u0442\u0435).`]}),`
`,s(t.h2,{children:"\u0421\u043A\u0440\u044B\u0442\u0438\u0435 \u0442\u043E\u0441\u0442\u043E\u0432"}),`
`,o(t.p,{children:[`\u041F\u043E-\u0443\u043C\u043E\u043B\u0447\u0430\u043D\u0438\u044E \u0442\u043E\u0441\u0442\u044B \u0441\u043A\u0440\u044B\u0432\u0430\u044E\u0442\u0441\u044F \u0430\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0438 \u0447\u0435\u0440\u0435\u0437 3 \u0441\u0435\u043A\u0443\u043D\u0434\u044B, \u0438\u043B\u0438 \u0447\u0435\u0440\u0435\u0437 7, \u0435\u0441\u043B\u0438
\u0435\u0441\u0442\u044C \u043A\u043D\u043E\u043F\u043A\u0430 \u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435\u043C. \u041F\u0440\u0438 \u043D\u0435\u043E\u0431\u0445\u043E\u0434\u0438\u043C\u043E\u0441\u0442\u0438 \u0434\u043B\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0441\u0442\u044C \u043A\u043E\u043D\u0442\u0440\u043E\u043B\u0438\u0440\u0443\u0435\u0442\u0441\u044F
\u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u043E\u043C `,s(t.code,{children:"duration"}),`. \u0415\u0441\u043B\u0438 \u0432\u044B \u0445\u043E\u0442\u0438\u0442\u0435, \u0447\u0442\u043E\u0431\u044B \u0442\u043E\u0441\u0442 \u043D\u0435 \u0441\u043A\u0440\u044B\u0432\u0430\u043B\u0441\u044F \u0430\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0438,
\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439\u0442\u0435 `,s(t.code,{children:"duration: Infinity"}),"."]}),`
`,o(t.p,{children:[`\u0412 \u043E\u0447\u0435\u043D\u044C \u0440\u0435\u0434\u043A\u0438\u0445 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044F\u0445 \u043C\u043E\u0436\u0435\u0442 \u043F\u043E\u043D\u0430\u0434\u043E\u0431\u0438\u0442\u044C\u0441\u044F \u0441\u043A\u0440\u044B\u0432\u0430\u0442\u044C \u0442\u043E\u0441\u0442\u044B \u043F\u0440\u043E\u0433\u0440\u0430\u043C\u043C\u043D\u043E. \u0414\u043B\u044F \u044D\u0442\u043E\u0433\u043E
\u0432\u043C\u0435\u0441\u0442\u0435 \u0441 \u0444\u0443\u043D\u043A\u0446\u0438\u0435\u0439 `,s(t.code,{children:"notify"})," \u0442\u0430\u043A\u0436\u0435 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044F \u0444\u0443\u043D\u043A\u0446\u0438\u044F ",s(t.code,{children:"dismiss"}),`, \u043A\u043E\u0442\u043E\u0440\u0430\u044F
\u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442 `,s(t.code,{children:"toastId"}),"."]}),`
`,s(p,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line dim'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/button&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line dim'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Gap: React.NamedExoticComponent&lt;GapProps>&#10;import Gap' >Gap</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/utils&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line highlight'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const toastIds: React.MutableRefObject&lt;string[]>' >toastIds</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='function React.useRef&lt;string[]>(initialValue: string[]): React.MutableRefObject&lt;string[]> (+2 overloads)' >useRef</data-lsp></span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">string</span><span style="color: #ABB2BF">[]&gt;([]);</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line dim'><span style="color: #ABB2BF">        &lt;</span><span style="color: #E06C75"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.style?: React.CSSProperties | undefined' >style</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">{ </span><span style="color: #E06C75"><data-lsp lsp='(property) StandardLonghandProperties&lt;string | number, string &amp; {}>.display?: Property.Display | undefined' >display</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;flex&apos;</span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(property) StandardLonghandProperties&lt;string | number, string &amp; {}>.width?: Property.Width&lt;string | number> | undefined' >width</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;100%&apos;</span><span style="color: #ABB2BF"> }</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&gt;</span></div><div class='line dim'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line dim'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.kind?: ButtonKind' >kind</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonKind.PRIMARY = "primary"' >PRIMARY</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line dim'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(property) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line highlight'><span style="color: #ABB2BF">                    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const toastId: string' >toastId</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const toaster: {&#10;    Provider: React.NamedExoticComponent&lt;{&#10;        children?: undefined;&#10;    }>;&#10;    notify: (options: ToastOptions) => string;&#10;    dismiss: (toastId: string) => void;&#10;}' >toaster</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) notify: (options: ToastOptions) => string' >notify</data-lsp></span><span style="color: #ABB2BF">({</span></div><div class='line dim'><span style="color: #ABB2BF">                        </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.title: string' >title</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;\u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435 \u043F\u043E\u0442\u0435\u0440\u044F\u043D\u043E&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line dim'><span style="color: #ABB2BF">                        </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.kind?: "critical" | "info" | "positive" | "caution"' >kind</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;critical&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line dim'><span style="color: #ABB2BF">                        </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.action?: {&#10;    label: string;&#10;    onClick(): void;&#10;}' >action</data-lsp></span><span style="color: #ABB2BF">: {</span></div><div class='line dim'><span style="color: #ABB2BF">                            </span><span style="color: #E06C75"><data-lsp lsp='(property) label: string' >label</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;\u041E\u0431\u043D\u043E\u0432\u0438\u0442\u044C&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line dim'><span style="color: #ABB2BF">                            </span><span style="color: #61AFEF"><data-lsp lsp='(method) onClick(): void' >onClick</data-lsp></span><span style="color: #ABB2BF">() {},</span></div><div class='line dim'><span style="color: #ABB2BF">                        },</span></div><div class='line dim'><span style="color: #ABB2BF">                        </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.duration?: number | undefined' >duration</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66"><data-lsp lsp='var Infinity: number' >Infinity</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line dim'><span style="color: #ABB2BF">                    });</span></div><div class='line highlight'><span style="color: #ABB2BF">                    </span><span style="color: #E5C07B"><data-lsp lsp='const toastIds: React.MutableRefObject&lt;string[]>' >toastIds</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B"><data-lsp lsp='(property) React.MutableRefObject&lt;string[]>.current: string[]' >current</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(method) Array&lt;string>.push(...items: string[]): number' >push</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #E06C75"><data-lsp lsp='const toastId: string' >toastId</data-lsp></span><span style="color: #ABB2BF">);</span></div><div class='line dim'><span style="color: #ABB2BF">                }</span><span style="color: #C678DD">}</span></div><div class='line dim'><span style="color: #ABB2BF">            &gt;</span></div><div class='line dim'><span style="color: #ABB2BF">                \u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C</span></div><div class='line dim'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line dim'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Gap: React.NamedExoticComponent&lt;GapProps>&#10;import Gap' >Gap</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) GapProps.size: number' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #D19A66">16</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line dim'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line dim'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.kind?: ButtonKind' >kind</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonKind.SECONDARY = "secondary"' >SECONDARY</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line dim'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(property) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line highlight'><span style="color: #ABB2BF">                    </span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const toastId: string' >toastId</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">of</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const toastIds: React.MutableRefObject&lt;string[]>' >toastIds</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(property) React.MutableRefObject&lt;string[]>.current: string[]' >current</data-lsp></span><span style="color: #ABB2BF">) {</span></div><div class='line highlight'><span style="color: #ABB2BF">                        </span><span style="color: #E5C07B"><data-lsp lsp='const toaster: {&#10;    Provider: React.NamedExoticComponent&lt;{&#10;        children?: undefined;&#10;    }>;&#10;    notify: (options: ToastOptions) => string;&#10;    dismiss: (toastId: string) => void;&#10;}' >toaster</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) dismiss: (toastId: string) => void' >dismiss</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #E06C75"><data-lsp lsp='const toastId: string' >toastId</data-lsp></span><span style="color: #ABB2BF">);</span></div><div class='line highlight'><span style="color: #ABB2BF">                    }</span></div><div class='line dim'><span style="color: #ABB2BF">                }</span><span style="color: #C678DD">}</span></div><div class='line dim'><span style="color: #ABB2BF">            &gt;</span></div><div class='line dim'><span style="color: #ABB2BF">                \u0421\u043A\u0440\u044B\u0442\u044C \u0432\u0441\u0435</span></div><div class='line dim'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line dim'><span style="color: #ABB2BF">        &lt;/</span><span style="color: #E06C75"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line dim'><span style="color: #ABB2BF">    );</span></div><div class='line dim'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{Button:n,ButtonKind:a}=i,{Gap:e}=m;return()=>{const u=v.exports.useRef([]);return o(t.div,{style:{display:"flex",width:"100%"},children:[s(n,{kind:a.PRIMARY,onClick:()=>{const B=l.notify({title:"\u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435 \u043F\u043E\u0442\u0435\u0440\u044F\u043D\u043E",kind:"critical",action:{label:"\u041E\u0431\u043D\u043E\u0432\u0438\u0442\u044C",onClick(){}},duration:1/0});u.current.push(B)},children:"\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C"}),s(e,{size:16}),s(n,{kind:a.SECONDARY,onClick:()=>{for(const B of u.current)l.dismiss(B)},children:"\u0421\u043A\u0440\u044B\u0442\u044C \u0432\u0441\u0435"})]})}}}),`
`,s(t.h2,{children:"\u041F\u0440\u0435\u0434\u043E\u0442\u0432\u0440\u0430\u0449\u0435\u043D\u0438\u0435 \u0434\u0443\u0431\u043B\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F"}),`
`,o(t.p,{children:[`\u0411\u044B\u0432\u0430\u044E\u0442 \u0441\u043B\u0443\u0447\u0430\u0438, \u043A\u043E\u0433\u0434\u0430 \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0451\u043D\u043D\u044B\u0439 \u0442\u043E\u0441\u0442 \u043D\u0443\u0436\u043D\u043E \u043F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0442\u044C \u0442\u043E\u043B\u044C\u043A\u043E \u0432 \u0435\u0434\u0438\u043D\u0441\u0442\u0432\u0435\u043D\u043D\u043E\u043C
\u044D\u043A\u0437\u0435\u043C\u043F\u043B\u044F\u0440\u0435. \u0414\u043B\u044F \u044D\u0442\u043E\u0433\u043E \u043C\u043E\u0436\u043D\u043E \u043F\u0435\u0440\u0435\u0434\u0430\u0442\u044C \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440 `,s(t.code,{children:"toastId"}),`, \u043A\u043E\u0442\u043E\u0440\u044B\u0439 \u0431\u0443\u0434\u0435\u0442
\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C\u0441\u044F \u0432 \u043A\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0443\u043D\u0438\u043A\u0430\u043B\u044C\u043D\u043E\u0433\u043E \u0438\u0434\u0435\u043D\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0440\u0430 \u044D\u0442\u043E\u0433\u043E \u0442\u043E\u0441\u0442\u0430.`]}),`
`,s(p,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line dim'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/button&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line dim'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const counterRef: React.MutableRefObject&lt;number>' >counterRef</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='function React.useRef&lt;number>(initialValue: number): React.MutableRefObject&lt;number> (+2 overloads)' >useRef</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">);</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line dim'><span style="color: #ABB2BF">        &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line dim'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line dim'><span style="color: #ABB2BF">                </span><span style="color: #E5C07B"><data-lsp lsp='const counterRef: React.MutableRefObject&lt;number>' >counterRef</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(property) React.MutableRefObject&lt;number>.current: number' >current</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">+=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></div><div class='line dim'><span style="color: #ABB2BF">                </span><span style="color: #E5C07B"><data-lsp lsp='const toaster: {&#10;    Provider: React.NamedExoticComponent&lt;{&#10;        children?: undefined;&#10;    }>;&#10;    notify: (options: ToastOptions) => string;&#10;    dismiss: (toastId: string) => void;&#10;}' >toaster</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) notify: (options: ToastOptions) => string' >notify</data-lsp></span><span style="color: #ABB2BF">({</span></div><div class='line highlight'><span style="color: #ABB2BF">                    </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.toastId?: string' >toastId</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;my-custom-toast&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line dim'><span style="color: #ABB2BF">                    </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.title: string' >title</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">\`\u042D\u0442\u043E\u0442 \u0442\u043E\u0441\u0442 \u0431\u044B\u043B \u0432\u044B\u0437\u0432\u0430\u043D </span><span style="color: #C678DD">\${</span><span style="color: #E5C07B"><data-lsp lsp='const counterRef: React.MutableRefObject&lt;number>' >counterRef</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(property) React.MutableRefObject&lt;number>.current: number' >current</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #98C379"> \u0440\u0430\u0437(\u0430)\`</span><span style="color: #ABB2BF">,</span></div><div class='line dim'><span style="color: #ABB2BF">                    </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.icon?: "countdown-timer" | Icon' >icon</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;countdown-timer&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line dim'><span style="color: #ABB2BF">                    </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.duration?: number | undefined' >duration</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">,</span></div><div class='line dim'><span style="color: #ABB2BF">                });</span></div><div class='line dim'><span style="color: #ABB2BF">            }</span><span style="color: #C678DD">}</span></div><div class='line dim'><span style="color: #ABB2BF">        &gt;</span></div><div class='line dim'><span style="color: #ABB2BF">            \u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C</span></div><div class='line dim'><span style="color: #ABB2BF">        &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line dim'><span style="color: #ABB2BF">    );</span></div><div class='line dim'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{Button:n}=i;return()=>{const a=v.exports.useRef(0);return s(n,{onClick:()=>{a.current+=1,l.notify({toastId:"my-custom-toast",title:`\u042D\u0442\u043E\u0442 \u0442\u043E\u0441\u0442 \u0431\u044B\u043B \u0432\u044B\u0437\u0432\u0430\u043D ${a.current} \u0440\u0430\u0437(\u0430)`,icon:"countdown-timer",duration:10})},children:"\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C"})}}}),`
`,s(t.h2,{children:"\u041F\u0440\u0438\u043C\u0435\u0440\u044B"}),`
`,s(p,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/button&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.kind?: ButtonKind' >kind</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonKind.SECONDARY = "secondary"' >SECONDARY</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #E5C07B"><data-lsp lsp='const toaster: {&#10;    Provider: React.NamedExoticComponent&lt;{&#10;        children?: undefined;&#10;    }>;&#10;    notify: (options: ToastOptions) => string;&#10;    dismiss: (toastId: string) => void;&#10;}' >toaster</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) notify: (options: ToastOptions) => string' >notify</data-lsp></span><span style="color: #ABB2BF">({</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.title: string' >title</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">                });</span></div><div class='line'><span style="color: #ABB2BF">            }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">        &gt;</span></div><div class='line'><span style="color: #ABB2BF">            Info</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{Button:n,ButtonKind:a}=i;return()=>s(n,{kind:a.SECONDARY,onClick:()=>{l.notify({title:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco"})},children:"Info"})}}),`
`,s(p,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/button&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const CheckCircleIcon: Icon&#10;import CheckCircleIcon' >CheckCircleIcon</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/icons&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.kind?: ButtonKind' >kind</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonKind.SECONDARY = "secondary"' >SECONDARY</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #E5C07B"><data-lsp lsp='const toaster: {&#10;    Provider: React.NamedExoticComponent&lt;{&#10;        children?: undefined;&#10;    }>;&#10;    notify: (options: ToastOptions) => string;&#10;    dismiss: (toastId: string) => void;&#10;}' >toaster</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) notify: (options: ToastOptions) => string' >notify</data-lsp></span><span style="color: #ABB2BF">({</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.title: string' >title</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u0430&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.subtitle?: string' >subtitle</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;\u0424\u0430\u0439\u043B \u201C\u041E\u0442\u0447\u0451\u0442-2021.xls\u201D \u0443\u0441\u043F\u0435\u0448\u043D\u043E \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043D&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.kind?: "positive" | "info" | "critical" | "caution"' >kind</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;positive&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.icon?: Icon | "countdown-timer"' >icon</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #E06C75"><data-lsp lsp='(alias) const CheckCircleIcon: Icon&#10;import CheckCircleIcon' >CheckCircleIcon</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">                });</span></div><div class='line'><span style="color: #ABB2BF">            }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">        &gt;</span></div><div class='line'><span style="color: #ABB2BF">            Positive</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{Button:n,ButtonKind:a}=i,{CheckCircleIcon:e}=F;return()=>s(n,{kind:a.SECONDARY,onClick:()=>{l.notify({title:"\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u0430",subtitle:"\u0424\u0430\u0439\u043B \u201C\u041E\u0442\u0447\u0451\u0442-2021.xls\u201D \u0443\u0441\u043F\u0435\u0448\u043D\u043E \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043D",kind:"positive",icon:e})},children:"Positive"})}}),`
`,s(p,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/button&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.kind?: ButtonKind' >kind</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonKind.SECONDARY = "secondary"' >SECONDARY</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #E5C07B"><data-lsp lsp='const toaster: {&#10;    Provider: React.NamedExoticComponent&lt;{&#10;        children?: undefined;&#10;    }>;&#10;    notify: (options: ToastOptions) => string;&#10;    dismiss: (toastId: string) => void;&#10;}' >toaster</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) notify: (options: ToastOptions) => string' >notify</data-lsp></span><span style="color: #ABB2BF">({</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.title: string' >title</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;\u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435 \u043F\u043E\u0442\u0435\u0440\u044F\u043D\u043E&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.kind?: "critical" | "info" | "positive" | "caution"' >kind</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;critical&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.action?: {&#10;    label: string;&#10;    onClick(): void;&#10;}' >action</data-lsp></span><span style="color: #ABB2BF">: {</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #E06C75"><data-lsp lsp='(property) label: string' >label</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;\u041E\u0431\u043D\u043E\u0432\u0438\u0442\u044C&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #61AFEF"><data-lsp lsp='(method) onClick(): void' >onClick</data-lsp></span><span style="color: #ABB2BF">() {},</span></div><div class='line'><span style="color: #ABB2BF">                    },</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.duration?: number | undefined' >duration</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66"><data-lsp lsp='var Infinity: number' >Infinity</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">                });</span></div><div class='line'><span style="color: #ABB2BF">            }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">        &gt;</span></div><div class='line'><span style="color: #ABB2BF">            Critical</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{Button:n,ButtonKind:a}=i;return()=>s(n,{kind:a.SECONDARY,onClick:()=>{l.notify({title:"\u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435 \u043F\u043E\u0442\u0435\u0440\u044F\u043D\u043E",kind:"critical",action:{label:"\u041E\u0431\u043D\u043E\u0432\u0438\u0442\u044C",onClick(){}},duration:1/0})},children:"Critical"})}}),`
`,s(p,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/button&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const AlertOctagonIcon: Icon&#10;import AlertOctagonIcon' >AlertOctagonIcon</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/icons&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.kind?: ButtonKind' >kind</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonKind.SECONDARY = "secondary"' >SECONDARY</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #E5C07B"><data-lsp lsp='const toaster: {&#10;    Provider: React.NamedExoticComponent&lt;{&#10;        children?: undefined;&#10;    }>;&#10;    notify: (options: ToastOptions) => string;&#10;    dismiss: (toastId: string) => void;&#10;}' >toaster</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) notify: (options: ToastOptions) => string' >notify</data-lsp></span><span style="color: #ABB2BF">({</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.title: string' >title</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;\u0423 \u0432\u0430\u0441 \u043D\u0435\u0434\u043E\u0441\u0442\u0430\u0442\u043E\u0447\u043D\u043E \u043F\u0440\u0430\u0432 \u043D\u0430 \u0441\u043E\u0432\u0435\u0440\u0448\u0435\u043D\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044F&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.kind?: "caution" | "info" | "positive" | "critical"' >kind</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;caution&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #E06C75"><data-lsp lsp='(property) ToastOptions.icon?: Icon | "countdown-timer"' >icon</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #E06C75"><data-lsp lsp='(alias) const AlertOctagonIcon: Icon&#10;import AlertOctagonIcon' >AlertOctagonIcon</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">                });</span></div><div class='line'><span style="color: #ABB2BF">            }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">        &gt;</span></div><div class='line'><span style="color: #ABB2BF">            Caution</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{Button:n,ButtonKind:a}=i,{AlertOctagonIcon:e}=F;return()=>s(n,{kind:a.SECONDARY,onClick:()=>{l.notify({title:"\u0423 \u0432\u0430\u0441 \u043D\u0435\u0434\u043E\u0441\u0442\u0430\u0442\u043E\u0447\u043D\u043E \u043F\u0440\u0430\u0432 \u043D\u0430 \u0441\u043E\u0432\u0435\u0440\u0448\u0435\u043D\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044F",kind:"caution",icon:e})},children:"Caution"})}})]})}}function d(r,c){throw new Error("Expected "+(c?"component":"object")+" `"+r+"` to be defined: you likely forgot to import, pass, or provide it.")}export{M as default,l as toaster};
