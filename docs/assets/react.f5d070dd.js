import{_ as B}from"./index.44c899c4.js";import{_ as y}from"./index.37b7dffc.js";import{j as s,a as o,F as u,r as F}from"./index.d39d3278.js";import"./Popover.module.5c24e4ee.js";function E(r={}){const{wrapper:c}=r.components||{};return c?s(c,{...r,children:s(v,{})}):v();function v(){const p=Object.assign({p:"p",code:"code",h2:"h2",div:"div"},r.components),{CodePreview:n}=p;return n||D("CodePreview",!0),o(u,{children:[o(p.p,{children:["\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u0435 \u0431\u0438\u0431\u043B\u0438\u043E\u0442\u0435\u043A\u0443 ",s(p.code,{children:"@siburkit/typography"})," \u0438\u0437 \u043D\u0430\u0448\u0435\u0433\u043E npm."]}),`
`,s(n,{code:`<pre class="shiki one-dark-pro" style="background-color: #282c34; color: #abb2bf"><div class="language-id">shell</div><div class='code-container'><code><div class='line'><span style="color: #ABB2BF">npm install @siburkit/typography</span></div></code></div></pre>`}),`
`,s(p.h2,{children:"Heading"}),`
`,s(n,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) function Heading({ level, className, children, ...rest }: HeadingProps): JSX.Element&#10;import Heading' >Heading</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/typography&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Heading({ level, className, children, ...rest }: HeadingProps): JSX.Element&#10;import Heading' >Heading</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) HeadingProps.level: HeadingLevel' >level</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #D19A66">1</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&gt;\u041F\u043E\u043B\u0438\u043F\u0440\u043E\u043F\u0438\u043B\u0435\u043D&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Heading({ level, className, children, ...rest }: HeadingProps): JSX.Element&#10;import Heading' >Heading</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Heading({ level, className, children, ...rest }: HeadingProps): JSX.Element&#10;import Heading' >Heading</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) HeadingProps.level: HeadingLevel' >level</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #D19A66">2</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&gt;\u041F\u043E\u043B\u0438\u043F\u0440\u043E\u043F\u0438\u043B\u0435\u043D&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Heading({ level, className, children, ...rest }: HeadingProps): JSX.Element&#10;import Heading' >Heading</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Heading({ level, className, children, ...rest }: HeadingProps): JSX.Element&#10;import Heading' >Heading</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) HeadingProps.level: HeadingLevel' >level</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #D19A66">3</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&gt;\u041F\u043E\u043B\u0438\u043F\u0440\u043E\u043F\u0438\u043B\u0435\u043D&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Heading({ level, className, children, ...rest }: HeadingProps): JSX.Element&#10;import Heading' >Heading</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Heading({ level, className, children, ...rest }: HeadingProps): JSX.Element&#10;import Heading' >Heading</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) HeadingProps.level: HeadingLevel' >level</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #D19A66">4</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&gt;\u041F\u043E\u043B\u0438\u043F\u0440\u043E\u043F\u0438\u043B\u0435\u043D&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Heading({ level, className, children, ...rest }: HeadingProps): JSX.Element&#10;import Heading' >Heading</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{Heading:a}=B;return()=>o(u,{children:[s(a,{level:1,children:"\u041F\u043E\u043B\u0438\u043F\u0440\u043E\u043F\u0438\u043B\u0435\u043D"}),s(a,{level:2,children:"\u041F\u043E\u043B\u0438\u043F\u0440\u043E\u043F\u0438\u043B\u0435\u043D"}),s(a,{level:3,children:"\u041F\u043E\u043B\u0438\u043F\u0440\u043E\u043F\u0438\u043B\u0435\u043D"}),s(a,{level:4,children:"\u041F\u043E\u043B\u0438\u043F\u0440\u043E\u043F\u0438\u043B\u0435\u043D"})]})}}),`
`,s(p.h2,{children:"Text"}),`
`,s(n,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) function Text({ size, weight, tag, className, children, ...rest }: TextProps): JSX.Element&#10;import Text' >Text</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) enum TextSize&#10;import TextSize' >TextSize</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/typography&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Gap: React.NamedExoticComponent&lt;GapProps>&#10;import Gap' >Gap</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/utils&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const text: string' >text</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;\u041F\u043E\u043B\u0438\u043F\u0440\u043E\u043F\u0438\u043B\u0435\u043D \u043F\u043E\u043B\u0443\u0447\u0430\u044E\u0442 \u043F\u043E\u043B\u0438\u043C\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u043F\u0440\u043E\u043F\u0438\u043B\u0435\u043D\u0430 \u0432 \u043F\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 \u043C\u0435\u0442\u0430\u043B\u043B\u043E\u043A\u043E\u043C\u043F\u043B\u0435\u043A\u0441\u043D\u044B\u0445 &apos;</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">+</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;\u043A\u0430\u0442\u0430\u043B\u0438\u0437\u0430\u0442\u043E\u0440\u043E\u0432, \u043D\u0430\u043F\u0440\u0438\u043C\u0435\u0440, \u043A\u0430\u0442\u0430\u043B\u0438\u0437\u0430\u0442\u043E\u0440\u043E\u0432 \u0426\u0438\u0433\u043B\u0435\u0440\u0430\u2014\u041D\u0430\u0442\u0442\u0430&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Text({ size, weight, tag, className, children, ...rest }: TextProps): JSX.Element&#10;import Text' >Text</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TextProps.size?: TextSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum TextSize&#10;import TextSize' >TextSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) TextSize.M = "m"' >M</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const text: string' >text</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Text({ size, weight, tag, className, children, ...rest }: TextProps): JSX.Element&#10;import Text' >Text</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Gap: React.NamedExoticComponent&lt;GapProps>&#10;import Gap' >Gap</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) GapProps.size: number' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #D19A66">8</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Text({ size, weight, tag, className, children, ...rest }: TextProps): JSX.Element&#10;import Text' >Text</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TextProps.size?: TextSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum TextSize&#10;import TextSize' >TextSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) TextSize.M = "m"' >M</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TextProps.weight?: "medium" | "regular"' >weight</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"medium"</span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const text: string' >text</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Text({ size, weight, tag, className, children, ...rest }: TextProps): JSX.Element&#10;import Text' >Text</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Gap: React.NamedExoticComponent&lt;GapProps>&#10;import Gap' >Gap</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) GapProps.size: number' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #D19A66">32</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Text({ size, weight, tag, className, children, ...rest }: TextProps): JSX.Element&#10;import Text' >Text</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TextProps.size?: TextSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum TextSize&#10;import TextSize' >TextSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) TextSize.M_SHORTER = "m-shorter"' >M_SHORTER</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const text: string' >text</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Text({ size, weight, tag, className, children, ...rest }: TextProps): JSX.Element&#10;import Text' >Text</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Gap: React.NamedExoticComponent&lt;GapProps>&#10;import Gap' >Gap</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) GapProps.size: number' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #D19A66">8</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Text({ size, weight, tag, className, children, ...rest }: TextProps): JSX.Element&#10;import Text' >Text</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TextProps.size?: TextSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum TextSize&#10;import TextSize' >TextSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) TextSize.M_SHORTER = "m-shorter"' >M_SHORTER</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TextProps.weight?: "medium" | "regular"' >weight</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"medium"</span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const text: string' >text</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Text({ size, weight, tag, className, children, ...rest }: TextProps): JSX.Element&#10;import Text' >Text</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{Text:a,TextSize:l}=B,{Gap:t}=y,e="\u041F\u043E\u043B\u0438\u043F\u0440\u043E\u043F\u0438\u043B\u0435\u043D \u043F\u043E\u043B\u0443\u0447\u0430\u044E\u0442 \u043F\u043E\u043B\u0438\u043C\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u043F\u0440\u043E\u043F\u0438\u043B\u0435\u043D\u0430 \u0432 \u043F\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 \u043C\u0435\u0442\u0430\u043B\u043B\u043E\u043A\u043E\u043C\u043F\u043B\u0435\u043A\u0441\u043D\u044B\u0445 \u043A\u0430\u0442\u0430\u043B\u0438\u0437\u0430\u0442\u043E\u0440\u043E\u0432, \u043D\u0430\u043F\u0440\u0438\u043C\u0435\u0440, \u043A\u0430\u0442\u0430\u043B\u0438\u0437\u0430\u0442\u043E\u0440\u043E\u0432 \u0426\u0438\u0433\u043B\u0435\u0440\u0430\u2014\u041D\u0430\u0442\u0442\u0430";return()=>o(u,{children:[s(a,{size:l.M,children:e}),s(t,{size:8}),s(a,{size:l.M,weight:"medium",children:e}),s(t,{size:32}),s(a,{size:l.M_SHORTER,children:e}),s(t,{size:8}),s(a,{size:l.M_SHORTER,weight:"medium",children:e})]})}}),`
`,s(p.h2,{children:"HintMessage \u0438 ErrorMessage"}),`
`,s(n,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) function Text({ size, weight, tag, className, children, ...rest }: TextProps): JSX.Element&#10;import Text' >Text</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) enum TextSize&#10;import TextSize' >TextSize</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) function HintMessage(props: HintMessageProps): JSX.Element | null&#10;import HintMessage' >HintMessage</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) function ErrorMessage(props: ErrorMessageProps): JSX.Element | null&#10;import ErrorMessage' >ErrorMessage</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">} </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/typography&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Gap: React.NamedExoticComponent&lt;GapProps>&#10;import Gap' >Gap</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/utils&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Text({ size, weight, tag, className, children, ...rest }: TextProps): JSX.Element&#10;import Text' >Text</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TextProps.size?: TextSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum TextSize&#10;import TextSize' >TextSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) TextSize.M = "m"' >M</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&gt;\u041F\u043E\u043B\u0438\u043F\u0440\u043E\u043F\u0438\u043B\u0435\u043D&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Text({ size, weight, tag, className, children, ...rest }: TextProps): JSX.Element&#10;import Text' >Text</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function HintMessage(props: HintMessageProps): JSX.Element | null&#10;import HintMessage' >HintMessage</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                \u0422\u0435\u0440\u043C\u043E\u043F\u043B\u0430\u0441\u0442\u0438\u0447\u043D\u044B\u0439 \u043F\u043E\u043B\u0438\u043C\u0435\u0440 \u043F\u0440\u043E\u043F\u0438\u043B\u0435\u043D\u0430 (\u043F\u0440\u043E\u043F\u0435\u043D\u0430)</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function HintMessage(props: HintMessageProps): JSX.Element | null&#10;import HintMessage' >HintMessage</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Gap: React.NamedExoticComponent&lt;GapProps>&#10;import Gap' >Gap</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) GapProps.size: number' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #D19A66">32</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Text({ size, weight, tag, className, children, ...rest }: TextProps): JSX.Element&#10;import Text' >Text</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TextProps.size?: TextSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum TextSize&#10;import TextSize' >TextSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) TextSize.M = "m"' >M</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&gt;\u041F\u043E\u043B\u0438\u043F\u0440\u043E\u043F\u0438\u043B\u0435\u043D&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Text({ size, weight, tag, className, children, ...rest }: TextProps): JSX.Element&#10;import Text' >Text</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ErrorMessage(props: ErrorMessageProps): JSX.Element | null&#10;import ErrorMessage' >ErrorMessage</data-lsp></span><span style="color: #ABB2BF">&gt;\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u043E\u0434\u0438\u043D \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u043E\u0432&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ErrorMessage(props: ErrorMessageProps): JSX.Element | null&#10;import ErrorMessage' >ErrorMessage</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{Text:a,TextSize:l,HintMessage:t,ErrorMessage:e}=B,{Gap:i}=y;return()=>o(u,{children:[s(a,{size:l.M,children:"\u041F\u043E\u043B\u0438\u043F\u0440\u043E\u043F\u0438\u043B\u0435\u043D"}),s(t,{children:"\u0422\u0435\u0440\u043C\u043E\u043F\u043B\u0430\u0441\u0442\u0438\u0447\u043D\u044B\u0439 \u043F\u043E\u043B\u0438\u043C\u0435\u0440 \u043F\u0440\u043E\u043F\u0438\u043B\u0435\u043D\u0430 (\u043F\u0440\u043E\u043F\u0435\u043D\u0430)"}),s(i,{size:32}),s(a,{size:l.M,children:"\u041F\u043E\u043B\u0438\u043F\u0440\u043E\u043F\u0438\u043B\u0435\u043D"}),s(e,{children:"\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u043E\u0434\u0438\u043D \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u043E\u0432"})]})}}),`
`,s(p.h2,{children:"EditableHeading"}),`
`,s(n,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const EditableHeading: React.ForwardRefExoticComponent&lt;EditableHeadingProps &amp; React.RefAttributes&lt;HTMLTextAreaElement>>&#10;import EditableHeading' >EditableHeading</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/typography&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Gap: React.NamedExoticComponent&lt;GapProps>&#10;import Gap' >Gap</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/utils&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">function</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF"><data-lsp lsp='function CompM(): JSX.Element' >CompM</data-lsp></span><span style="color: #ABB2BF">() {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> [</span><span style="color: #E5C07B"><data-lsp lsp='const value: string' >value</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B"><data-lsp lsp='const setValue: React.Dispatch&lt;React.SetStateAction&lt;string>>' >setValue</data-lsp></span><span style="color: #ABB2BF">] </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='function React.useState&lt;string>(initialState: string | (() => string)): [string, React.Dispatch&lt;React.SetStateAction&lt;string>>] (+1 overload)' >useState</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&apos;\u0417\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A 3&apos;</span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const EditableHeading: React.ForwardRefExoticComponent&lt;EditableHeadingProps &amp; React.RefAttributes&lt;HTMLTextAreaElement>>&#10;import EditableHeading' >EditableHeading</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) EditableHeadingProps.level: 3 | 4' >level</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #D19A66">3</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) placeholder?: string | undefined' >placeholder</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u0435"</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) EditableHeadingProps.value: string' >value</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const value: string' >value</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(method) EditableHeadingProps.onChange(value: string): void' >onChange</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const setValue: React.Dispatch&lt;React.SetStateAction&lt;string>>' >setValue</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) EditableHeadingProps.error?: string' >error</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u0435"</span></div><div class='line'><span style="color: #ABB2BF">        /&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">function</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF"><data-lsp lsp='function CompS(): JSX.Element' >CompS</data-lsp></span><span style="color: #ABB2BF">() {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> [</span><span style="color: #E5C07B"><data-lsp lsp='const value: string' >value</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B"><data-lsp lsp='const setValue: React.Dispatch&lt;React.SetStateAction&lt;string>>' >setValue</data-lsp></span><span style="color: #ABB2BF">] </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='function React.useState&lt;string>(initialState: string | (() => string)): [string, React.Dispatch&lt;React.SetStateAction&lt;string>>] (+1 overload)' >useState</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&apos;\u0417\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A 4&apos;</span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const EditableHeading: React.ForwardRefExoticComponent&lt;EditableHeadingProps &amp; React.RefAttributes&lt;HTMLTextAreaElement>>&#10;import EditableHeading' >EditableHeading</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) EditableHeadingProps.level: 3 | 4' >level</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #D19A66">4</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) placeholder?: string | undefined' >placeholder</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u0435"</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) EditableHeadingProps.value: string' >value</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const value: string' >value</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(method) EditableHeadingProps.onChange(value: string): void' >onChange</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const setValue: React.Dispatch&lt;React.SetStateAction&lt;string>>' >setValue</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) EditableHeadingProps.error?: string' >error</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u0435"</span></div><div class='line'><span style="color: #ABB2BF">        /&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;</span><span style="color: #E06C75"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.style?: React.CSSProperties | undefined' >style</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">{ </span><span style="color: #E06C75"><data-lsp lsp='(property) StandardLonghandProperties&lt;string | number, string &amp; {}>.width?: Property.Width&lt;string | number> | undefined' >width</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">500</span><span style="color: #ABB2BF"> }</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='function CompM(): JSX.Element' >CompM</data-lsp></span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Gap: React.NamedExoticComponent&lt;GapProps>&#10;import Gap' >Gap</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) GapProps.size: number' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #D19A66">32</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='function CompS(): JSX.Element' >CompS</data-lsp></span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/</span><span style="color: #E06C75"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{EditableHeading:a}=B,{Gap:l}=y;function t(){const[i,d]=F.exports.useState("\u0417\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A 3");return s(a,{level:3,placeholder:"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u0435",value:i,onChange:d,error:"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u0435"})}function e(){const[i,d]=F.exports.useState("\u0417\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A 4");return s(a,{level:4,placeholder:"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u0435",value:i,onChange:d,error:"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u0435"})}return()=>o(p.div,{style:{width:500},children:[s(t,{}),s(l,{size:32}),s(e,{})]})}})]})}}function D(r,c){throw new Error("Expected "+(c?"component":"object")+" `"+r+"` to be defined: you likely forgot to import, pass, or provide it.")}export{E as default};
