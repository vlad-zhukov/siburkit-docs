import{a as s,j as e,F as m,r as d,a$ as C}from"./index.720bafa5.js";import{_ as E}from"./index.da20fdba.js";import{_ as S}from"./index.415154c9.js";import"./Popover.module.47ab085d.js";import{P as f}from"./PackageInfo.701250f5.js";import"./Columns.bcb6762e.js";const h="@siburkit/tabs",L="1.0.0";function X(r={}){const{wrapper:y}=r.components||{};return y?s(y,{...r,children:s(b,{})}):b();function b(){const a=Object.assign({h2:"h2",p:"p",a:"a",h3:"h3",code:"code",div:"div"},r.components),{CodePreview:c}=a;return c||P("CodePreview",!0),e(m,{children:[s(f,{name:h,version:L}),`
`,s(a.h2,{children:"\u0414\u043E\u0441\u0442\u0443\u043F\u043D\u043E\u0441\u0442\u044C"}),`
`,e(a.p,{children:[`\u0421\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0433\u0430\u0439\u0434\u043B\u0430\u0439\u043D\u0430\u043C
`,s(a.a,{href:"https://www.w3.org/TR/wai-aria-1.2/#tablist",children:"WAI-ARIA TabList"}),"."]}),`
`,s(a.h2,{children:"\u041F\u0440\u0438\u043C\u0435\u0440\u044B"}),`
`,s(a.h3,{children:"\u0421 \u0438\u043A\u043E\u043D\u043A\u0430\u043C\u0438"}),`
`,s(c,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) function TabList({ selected, onSelect, onClose, className, children, ...rest }: TabListProps): JSX.Element&#10;import TabList' >TabList</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) function Tab(_props: TabProps): null&#10;import Tab' >Tab</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/tabs&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const InfoIcon: Icon&#10;import InfoIcon' >InfoIcon</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) const ClockIcon: Icon&#10;import ClockIcon' >ClockIcon</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) const MessageCircleIcon: Icon&#10;import MessageCircleIcon' >MessageCircleIcon</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/icons&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> [</span><span style="color: #E5C07B"><data-lsp lsp='const selected: string' >selected</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B"><data-lsp lsp='const setSelected: React.Dispatch&lt;React.SetStateAction&lt;string>>' >setSelected</data-lsp></span><span style="color: #ABB2BF">] </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='function React.useState&lt;string>(initialState: string | (() => string)): [string, React.Dispatch&lt;React.SetStateAction&lt;string>>] (+1 overload)' >useState</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&apos;info&apos;</span><span style="color: #ABB2BF">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function TabList({ selected, onSelect, onClose, className, children, ...rest }: TabListProps): JSX.Element&#10;import TabList' >TabList</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabListProps.selected: string' >selected</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const selected: string' >selected</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(method) TabListProps.onSelect(tabId: string): void' >onSelect</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const setSelected: React.Dispatch&lt;React.SetStateAction&lt;string>>' >setSelected</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Tab(_props: TabProps): null&#10;import Tab' >Tab</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.id: string' >id</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"info"</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.label: string' >label</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"\u0418\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F"</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.icon?: Icon | undefined' >icon</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(alias) const InfoIcon: Icon&#10;import InfoIcon' >InfoIcon</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Tab(_props: TabProps): null&#10;import Tab' >Tab</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.id: string' >id</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"history"</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.label: string' >label</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"\u0418\u0441\u0442\u043E\u0440\u0438\u044F"</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.icon?: Icon | undefined' >icon</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(alias) const ClockIcon: Icon&#10;import ClockIcon' >ClockIcon</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Tab(_props: TabProps): null&#10;import Tab' >Tab</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.id: string' >id</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"comments"</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.label: string' >label</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"\u041A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0438"</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.icon?: Icon | undefined' >icon</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(alias) const MessageCircleIcon: Icon&#10;import MessageCircleIcon' >MessageCircleIcon</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function TabList({ selected, onSelect, onClose, className, children, ...rest }: TabListProps): JSX.Element&#10;import TabList' >TabList</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{TabList:t,Tab:l}=C,{InfoIcon:p,ClockIcon:n,MessageCircleIcon:B}=E;return()=>{const[A,o]=d.exports.useState("info");return e(t,{selected:A,onSelect:o,children:[s(l,{id:"info",label:"\u0418\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F",icon:p}),s(l,{id:"history",label:"\u0418\u0441\u0442\u043E\u0440\u0438\u044F",icon:n}),s(l,{id:"comments",label:"\u041A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0438",icon:B})]})}}}),`
`,s(a.h3,{children:"\u0417\u0430\u043A\u0440\u044B\u0432\u0430\u0435\u043C\u044B\u0435"}),`
`,s(c,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) function TabList({ selected, onSelect, onClose, className, children, ...rest }: TabListProps): JSX.Element&#10;import TabList' >TabList</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) function Tab(_props: TabProps): null&#10;import Tab' >Tab</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/tabs&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/button&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const defaultTabs: string[]' >defaultTabs</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> [</span><span style="color: #98C379">&apos;1&apos;</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&apos;2&apos;</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&apos;3&apos;</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&apos;4&apos;</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&apos;5&apos;</span><span style="color: #ABB2BF">];</span></div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const defaultSelected: string' >defaultSelected</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75"><data-lsp lsp='const defaultTabs: string[]' >defaultTabs</data-lsp></span><span style="color: #ABB2BF">[</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">] </span><span style="color: #C678DD">as</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">string</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> [</span><span style="color: #E5C07B"><data-lsp lsp='const tabs: string[]' >tabs</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B"><data-lsp lsp='const setTabs: React.Dispatch&lt;React.SetStateAction&lt;string[]>>' >setTabs</data-lsp></span><span style="color: #ABB2BF">] </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='function React.useState&lt;string[]>(initialState: string[] | (() => string[])): [string[], React.Dispatch&lt;React.SetStateAction&lt;string[]>>] (+1 overload)' >useState</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #E06C75"><data-lsp lsp='const defaultTabs: string[]' >defaultTabs</data-lsp></span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> [</span><span style="color: #E5C07B"><data-lsp lsp='const selected: string' >selected</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B"><data-lsp lsp='const setSelected: React.Dispatch&lt;React.SetStateAction&lt;string>>' >setSelected</data-lsp></span><span style="color: #ABB2BF">] </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='function React.useState&lt;string>(initialState: string | (() => string)): [string, React.Dispatch&lt;React.SetStateAction&lt;string>>] (+1 overload)' >useState</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #E06C75"><data-lsp lsp='const defaultSelected: string' >defaultSelected</data-lsp></span><span style="color: #ABB2BF">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #E5C07B"><data-lsp lsp='const tabs: string[]' >tabs</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(property) Array&lt;string>.length: number' >length</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">===</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">) {</span></div><div class='line'><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.kind?: ButtonKind' >kind</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonKind.SECONDARY = "secondary"' >SECONDARY</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(property) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #61AFEF"><data-lsp lsp='const setTabs: (value: React.SetStateAction&lt;string[]>) => void' >setTabs</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #E06C75"><data-lsp lsp='const defaultTabs: string[]' >defaultTabs</data-lsp></span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #61AFEF"><data-lsp lsp='const setSelected: (value: React.SetStateAction&lt;string>) => void' >setSelected</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #E06C75"><data-lsp lsp='const defaultSelected: string' >defaultSelected</data-lsp></span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">                }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            &gt;</span></div><div class='line'><span style="color: #ABB2BF">                \u041E\u0431\u043D\u043E\u0432\u0438\u0442\u044C</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">        );</span></div><div class='line'><span style="color: #ABB2BF">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function TabList({ selected, onSelect, onClose, className, children, ...rest }: TabListProps): JSX.Element&#10;import TabList' >TabList</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) TabListProps.selected: string' >selected</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const selected: string' >selected</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(method) TabListProps.onSelect(tabId: string): void' >onSelect</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const setSelected: React.Dispatch&lt;React.SetStateAction&lt;string>>' >setSelected</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(method) TabListProps.onClose?(tabId: string): void' >onClose</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75"><data-lsp lsp='(parameter) id: string' >id</data-lsp></span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const index: number' >index</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const tabs: string[]' >tabs</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(method) Array&lt;string>.indexOf(searchElement: string, fromIndex?: number | undefined): number' >indexOf</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #E06C75"><data-lsp lsp='(parameter) id: string' >id</data-lsp></span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #E06C75"><data-lsp lsp='const index: number' >index</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">!==</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">-</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">) {</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const nextTabs: string[]' >nextTabs</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const tabs: string[]' >tabs</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(method) Array&lt;string>.filter(predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[] (+1 overload)' >filter</data-lsp></span><span style="color: #ABB2BF">((</span><span style="color: #E06C75"><data-lsp lsp='(parameter) _: string' >_</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(parameter) i: number' >i</data-lsp></span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75"><data-lsp lsp='(parameter) i: number' >i</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">!==</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75"><data-lsp lsp='const index: number' >index</data-lsp></span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #61AFEF"><data-lsp lsp='const setTabs: (value: React.SetStateAction&lt;string[]>) => void' >setTabs</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #E06C75"><data-lsp lsp='const nextTabs: string[]' >nextTabs</data-lsp></span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #61AFEF"><data-lsp lsp='const setSelected: (value: React.SetStateAction&lt;string>) => void' >setSelected</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #E06C75"><data-lsp lsp='const nextTabs: string[]' >nextTabs</data-lsp></span><span style="color: #ABB2BF">[</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">] </span><span style="color: #56B6C2">||</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;&apos;</span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">                }</span></div><div class='line'><span style="color: #ABB2BF">            }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">        &gt;</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='const tabs: string[]' >tabs</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(method) Array&lt;string>.map&lt;JSX.Element>(callbackfn: (value: string, index: number, array: string[]) => JSX.Element, thisArg?: any): JSX.Element[]' >map</data-lsp></span><span style="color: #ABB2BF">((</span><span style="color: #E06C75"><data-lsp lsp='(parameter) id: string' >id</data-lsp></span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Tab(_props: TabProps): null&#10;import Tab' >Tab</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) React.Attributes.key?: React.Key | null | undefined' >key</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(parameter) id: string' >id</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.id: string' >id</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(parameter) id: string' >id</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.label: string' >label</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #98C379">\`\u0421\u0445\u0435\u043C\u0430 </span><span style="color: #C678DD">\${</span><span style="color: #E06C75"><data-lsp lsp='(parameter) id: string' >id</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #98C379">\`</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.closable?: boolean | undefined' >closable</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #D19A66">true</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">            ))</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function TabList({ selected, onSelect, onClose, className, children, ...rest }: TabListProps): JSX.Element&#10;import TabList' >TabList</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{TabList:t,Tab:l}=C,{Button:p,ButtonKind:n}=S,B=["1","2","3","4","5"],A=B[0];return()=>{const[o,F]=d.exports.useState(B),[T,u]=d.exports.useState(A);return o.length===0?s(p,{kind:n.SECONDARY,onClick:()=>{F(B),u(A)},children:"\u041E\u0431\u043D\u043E\u0432\u0438\u0442\u044C"}):s(t,{selected:T,onSelect:u,onClose:i=>{const D=o.indexOf(i);if(D!==-1){const v=o.filter((R,g)=>g!==D);F(v),u(v[0]||"")}},children:o.map(i=>s(l,{id:i,label:`\u0421\u0445\u0435\u043C\u0430 ${i}`,closable:!0},i))})}}}),`
`,s(a.h3,{children:"\u041D\u0430 \u0432\u0441\u044E \u0448\u0438\u0440\u0438\u043D\u0443"}),`
`,e(a.p,{children:[`\u0422\u0430\u0431\u044B \u043F\u043E-\u0443\u043C\u043E\u043B\u0447\u0430\u043D\u0438\u044E \u0440\u0430\u0441\u0442\u044F\u0433\u0438\u0432\u0430\u044E\u0442\u0441\u044F \u043D\u0430 \u0448\u0438\u0440\u0438\u043D\u0443 \u043A\u043E\u043D\u0442\u0435\u0439\u043D\u0435\u0440\u0430. \u0414\u043B\u044F \u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u044F \u0448\u0438\u0440\u0438\u043D\u044B
\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439\u0442\u0435 flex-\u043A\u043E\u043D\u0442\u0435\u0439\u043D\u0435\u0440 \u0441\u043E \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u043E\u043C `,s(a.code,{children:"align-items: start"}),` \u0438\u043B\u0438 \u0434\u043E\u0431\u0430\u0432\u044C\u0442\u0435
\u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u0443 `,s(a.code,{children:"TabList"})," CSS-\u043A\u043B\u0430\u0441\u0441 \u0441\u043E \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u043E\u043C ",s(a.code,{children:"align-self: start"}),"."]}),`
`,s(c,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) function TabList({ selected, onSelect, onClose, className, children, ...rest }: TabListProps): JSX.Element&#10;import TabList' >TabList</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) function Tab(_props: TabProps): null&#10;import Tab' >Tab</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/tabs&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> [</span><span style="color: #E5C07B"><data-lsp lsp='const selected: string' >selected</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B"><data-lsp lsp='const setSelected: React.Dispatch&lt;React.SetStateAction&lt;string>>' >setSelected</data-lsp></span><span style="color: #ABB2BF">] </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='function React.useState&lt;string>(initialState: string | (() => string)): [string, React.Dispatch&lt;React.SetStateAction&lt;string>>] (+1 overload)' >useState</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&apos;all&apos;</span><span style="color: #ABB2BF">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;</span><span style="color: #E06C75"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.style?: React.CSSProperties | undefined' >style</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">{ </span><span style="color: #E06C75"><data-lsp lsp='(property) StandardLonghandProperties&lt;string | number, string &amp; {}>.width?: Property.Width&lt;string | number> | undefined' >width</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;100%&apos;</span><span style="color: #ABB2BF"> }</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function TabList({ selected, onSelect, onClose, className, children, ...rest }: TabListProps): JSX.Element&#10;import TabList' >TabList</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(property) TabListProps.selected: string' >selected</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const selected: string' >selected</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(method) TabListProps.onSelect(tabId: string): void' >onSelect</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const setSelected: React.Dispatch&lt;React.SetStateAction&lt;string>>' >setSelected</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(method) TabListProps.onClose?(tabId: string): void' >onClose</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {}</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            &gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Tab(_props: TabProps): null&#10;import Tab' >Tab</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.id: string' >id</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"all"</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.label: string' >label</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"\u0412\u0441\u0435"</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.badge?: string | undefined' >badge</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"5"</span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Tab(_props: TabProps): null&#10;import Tab' >Tab</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.id: string' >id</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"reminders"</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.label: string' >label</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"\u041D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F"</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.badge?: string | undefined' >badge</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"2"</span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Tab(_props: TabProps): null&#10;import Tab' >Tab</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.id: string' >id</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"schedules"</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.label: string' >label</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"\u0420\u0430\u0441\u043F\u0438\u0441\u0430\u043D\u0438\u044F"</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.badge?: string | undefined' >badge</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"3"</span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function TabList({ selected, onSelect, onClose, className, children, ...rest }: TabListProps): JSX.Element&#10;import TabList' >TabList</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/</span><span style="color: #E06C75"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{TabList:t,Tab:l}=C;return()=>{const[p,n]=d.exports.useState("all");return s(a.div,{style:{width:"100%"},children:e(t,{selected:p,onSelect:n,onClose:()=>{},children:[s(l,{id:"all",label:"\u0412\u0441\u0435",badge:"5"}),s(l,{id:"reminders",label:"\u041D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F",badge:"2"}),s(l,{id:"schedules",label:"\u0420\u0430\u0441\u043F\u0438\u0441\u0430\u043D\u0438\u044F",badge:"3"})]})})}}}),`
`,s(a.h3,{children:"\u041D\u0435\u0430\u043A\u0442\u0438\u0432\u043D\u044B\u0435"}),`
`,s(c,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) function TabList({ selected, onSelect, onClose, className, children, ...rest }: TabListProps): JSX.Element&#10;import TabList' >TabList</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) function Tab(_props: TabProps): null&#10;import Tab' >Tab</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/tabs&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> [</span><span style="color: #E5C07B"><data-lsp lsp='const selected: string' >selected</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B"><data-lsp lsp='const setSelected: React.Dispatch&lt;React.SetStateAction&lt;string>>' >setSelected</data-lsp></span><span style="color: #ABB2BF">] </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='function React.useState&lt;string>(initialState: string | (() => string)): [string, React.Dispatch&lt;React.SetStateAction&lt;string>>] (+1 overload)' >useState</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&apos;1&apos;</span><span style="color: #ABB2BF">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function TabList({ selected, onSelect, onClose, className, children, ...rest }: TabListProps): JSX.Element&#10;import TabList' >TabList</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabListProps.selected: string' >selected</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const selected: string' >selected</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(method) TabListProps.onSelect(tabId: string): void' >onSelect</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const setSelected: React.Dispatch&lt;React.SetStateAction&lt;string>>' >setSelected</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Tab(_props: TabProps): null&#10;import Tab' >Tab</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.id: string' >id</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"1"</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.label: string' >label</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"One"</span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Tab(_props: TabProps): null&#10;import Tab' >Tab</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.id: string' >id</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"2"</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.label: string' >label</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"Two"</span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Tab(_props: TabProps): null&#10;import Tab' >Tab</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.id: string' >id</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"3"</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.label: string' >label</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"Three"</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.disabled?: boolean | undefined' >disabled</data-lsp></span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Tab(_props: TabProps): null&#10;import Tab' >Tab</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.id: string' >id</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"4"</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.label: string' >label</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"Four"</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.badge?: string | undefined' >badge</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"4"</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) TabProps.disabled?: boolean | undefined' >disabled</data-lsp></span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function TabList({ selected, onSelect, onClose, className, children, ...rest }: TabListProps): JSX.Element&#10;import TabList' >TabList</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{TabList:t,Tab:l}=C;return()=>{const[p,n]=d.exports.useState("1");return e(t,{selected:p,onSelect:n,children:[s(l,{id:"1",label:"One"}),s(l,{id:"2",label:"Two"}),s(l,{id:"3",label:"Three",disabled:!0}),s(l,{id:"4",label:"Four",badge:"4",disabled:!0})]})}}})]})}}function P(r,y){throw new Error("Expected "+(y?"component":"object")+" `"+r+"` to be defined: you likely forgot to import, pass, or provide it.")}export{X as default};
