import{_ as M}from"./index.fd6e4fb6.js";import{j as s,a as l,F as A,r as b,aV as C}from"./index.7c9dff30.js";import{_ as D}from"./index.5e6d52fd.js";import"./Popover.module.ca2bf093.js";function T(u={}){const{wrapper:v}=u.components||{};return v?s(v,{...u,children:s(E,{})}):E();function E(){const a=Object.assign({p:"p",code:"code",a:"a",h2:"h2",br:"br",ul:"ul",li:"li"},u.components),{CodePreview:o}=a;return o||f("CodePreview",!0),l(A,{children:[l(a.p,{children:["\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u0435 \u0431\u0438\u0431\u043B\u0438\u043E\u0442\u0435\u043A\u0443 ",s(a.code,{children:"@siburkit/modal"})," \u0438\u0437 \u043D\u0430\u0448\u0435\u0433\u043E npm."]}),`
`,s(o,{code:`<pre class="shiki one-dark-pro" style="background-color: #282c34; color: #abb2bf"><div class="language-id">shell</div><div class='code-container'><code><div class='line'><span style="color: #ABB2BF">npm install @siburkit/modal</span></div></code></div></pre>`}),`
`,l(a.p,{children:["\u041E\u0431\u0435\u0440\u043D\u0438\u0442\u0435 \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0432 ",s(a.a,{href:"/layers",children:s(a.code,{children:"<LayersManager>"})}),` (\u0435\u0441\u043B\u0438 \u0432\u044B \u0435\u0449\u0451 \u044D\u0442\u043E\u0433\u043E \u043D\u0435
\u0441\u0434\u0435\u043B\u0430\u043B\u0438) \u0438 \u0434\u043E\u0431\u0430\u0432\u044C\u0442\u0435 `,s(a.code,{children:"<ModalsRoot />"})," \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u043C \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u043C."]}),`
`,s(o,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf"><div class="language-id">tsx</div><div class='code-container'><code><div class='line highlight'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const LayersManager: React.FC&lt;{}>&#10;import LayersManager' >LayersManager</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/core&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line highlight'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const ModalsRoot: React_2.NamedExoticComponent&lt;{&#10;    children?: undefined;&#10;}>&#10;import ModalsRoot' >ModalsRoot</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/modal&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: #E5C07B"><data-lsp lsp='import ReactDOM' >ReactDOM</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='const render: ReactDOM.Renderer&#10;(element: React.FunctionComponentElement&lt;any> | React.FunctionComponentElement&lt;any>[], container: ReactDOM.Container | null, callback?: (() => void) | undefined) => void (+6 overloads)' >render</data-lsp></span><span style="color: #ABB2BF">(</span></div><div class='line dim'><span style="color: #ABB2BF">    &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp>.<data-lsp lsp='const React.StrictMode: React.ExoticComponent&lt;{&#10;    children?: React.ReactNode;&#10;}>' >StrictMode</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line highlight'><span style="color: #ABB2BF">        &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const LayersManager: React.FC&lt;{}>&#10;import LayersManager' >LayersManager</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line dim'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='const App: () => null' >App</data-lsp></span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line highlight'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const ModalsRoot: React_2.NamedExoticComponent&lt;{&#10;    children?: undefined;&#10;}>&#10;import ModalsRoot' >ModalsRoot</data-lsp></span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line highlight'><span style="color: #ABB2BF">        &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const LayersManager: React.FC&lt;{}>&#10;import LayersManager' >LayersManager</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line dim'><span style="color: #ABB2BF">    &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp>.<data-lsp lsp='const React.StrictMode: React.ExoticComponent&lt;{&#10;    children?: React.ReactNode;&#10;}>' >StrictMode</data-lsp></span><span style="color: #ABB2BF">&gt;,</span></div><div class='line dim'><span style="color: #ABB2BF">    </span><span style="color: #E5C07B"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(method) Document.getElementById(elementId: string): HTMLElement | null' >getElementById</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&apos;root&apos;</span><span style="color: #ABB2BF">),</span></div><div class='line dim'><span style="color: #ABB2BF">);</span></div></code></div></pre>`}),`
`,l(a.p,{children:[`\u041A\u0430\u043A \u043F\u0440\u0430\u0432\u0438\u043B\u043E, \u043C\u043E\u0434\u0430\u043B\u044C\u043D\u044B\u0435 \u043E\u043A\u043D\u0430 \u043F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u044E\u0442\u0441\u044F \u0432 \u043E\u0442\u0432\u0435\u0442 \u043D\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F,
\u043F\u043E\u044D\u0442\u043E\u043C\u0443 \u0432 \u043E\u0441\u043D\u043E\u0432\u0435 \u0431\u0438\u0431\u043B\u0438\u043E\u0442\u0435\u043A\u0438 \u043B\u0435\u0436\u0438\u0442 \u0438\u043C\u043F\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u044B\u0439 \u043F\u043E\u0434\u0445\u043E\u0434. \u041C\u043E\u0434\u0430\u043B\u043A\u0438 \u0441\u043E\u0437\u0434\u0430\u044E\u0442\u0441\u044F
\u0444\u0443\u043D\u043A\u0446\u0438\u0435\u0439 `,s(a.code,{children:"createModal"}),", \u043A\u043E\u0442\u043E\u0440\u0430\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043E\u0431\u044F\u0437\u0430\u0442\u0435\u043B\u044C\u043D\u044B\u0435 \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B ",s(a.code,{children:"kind"}),` \u0438
`,s(a.code,{children:"component"}),`, \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043E\u0431\u044A\u0435\u043A\u0442 \u0441 \u0444\u0443\u043D\u043A\u0446\u0438\u044F\u043C\u0438 \u0434\u043B\u044F \u043E\u0442\u043A\u0440\u044B\u0442\u0438\u044F \u0438 \u0437\u0430\u043A\u0440\u044B\u0442\u0438\u044F \u044D\u0442\u043E\u0439
\u043C\u043E\u0434\u0430\u043B\u043A\u0438 \u2014 `,s(a.code,{children:"open"})," \u0438 ",s(a.code,{children:"dismiss"})," \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043D\u043D\u043E."]}),`
`,l(a.p,{children:["\u041C\u043E\u0434\u0430\u043B\u043A\u0430 \u0433\u0430\u0440\u0430\u043D\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u043E \u043F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0435\u0442\u0441\u044F \u0442\u043E\u043B\u044C\u043A\u043E \u043E\u0434\u0438\u043D \u0440\u0430\u0437, \u043F\u043E\u0432\u0442\u043E\u0440\u043D\u044B\u0435 \u0432\u044B\u0437\u043E\u0432\u044B ",s(a.code,{children:"open"}),`
\u0440\u0435\u0440\u0435\u043D\u0434\u0435\u0440\u044F\u0442 \u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442 \u0441 \u043D\u043E\u0432\u044B\u043C\u0438 `,s(a.a,{href:"#props",children:"\u043F\u0440\u043E\u043F\u0430\u043C\u0438"}),". ",s(a.code,{children:"dismiss"}),` \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u0442\u0441\u044F \u0442\u043E\u043B\u044C\u043A\u043E \u0432
\u0442\u0435\u0445 \u0441\u043B\u0443\u0447\u0430\u044F\u0445, \u043A\u043E\u0433\u0434\u0430 \u043D\u0443\u0436\u043D\u0430 \u043A\u0430\u0441\u0442\u043E\u043C\u043D\u0430\u044F \u043B\u043E\u0433\u0438\u043A\u0430 \u0437\u0430\u043A\u0440\u044B\u0442\u0438\u044F. \u0412\u043D\u0443\u0442\u0440\u0438 \u043A\u043E\u043D\u0442\u0435\u043D\u0442\u0430 \u043C\u043E\u0434\u0430\u043B\u043A\u0438
\u0432\u0441\u0435\u0433\u0434\u0430 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439\u0442\u0435 \u0442\u043E\u043B\u044C\u043A\u043E \u043F\u0440\u043E\u043F `,s(a.code,{children:"onDismiss"}),"."]}),`
`,s(o,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) function createModal&lt;Props extends Record&lt;string, any>>(args: CreateModalArgs&lt;Props>): {&#10;    open: (props: Props &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}&#10;import createModal' >createModal</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/modal&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const beautifulDialog: {&#10;    open: (props: Record&lt;string, any> &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >beautifulDialog</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF"><data-lsp lsp='(alias) createModal&lt;Record&lt;string, any>>(args: CreateModalArgs&lt;Record&lt;string, any>>): {&#10;    open: (props: Record&lt;string, any> &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}&#10;import createModal' >createModal</data-lsp></span><span style="color: #ABB2BF">({</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) CreateModalArgs&lt;Props extends Record&lt;string, any>>.kind: ModalKind' >kind</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;dialog&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #61AFEF"><data-lsp lsp='(method) CreateModalArgs&lt;Record&lt;string, any>>.component(this: void, props: Record&lt;string, any> &amp; ModalProps): JSX.Element' >component</data-lsp></span><span style="color: #ABB2BF">: ({ </span><span style="color: #E06C75"><data-lsp lsp='(parameter) onDismiss: (this: void) => void' >onDismiss</data-lsp></span><span style="color: #ABB2BF"> }) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> &lt;&gt;...&lt;/&gt;,</span></div><div class='line'><span style="color: #ABB2BF">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">function</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF"><data-lsp lsp='function App(): JSX.Element' >App</data-lsp></span><span style="color: #ABB2BF">() {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E06C75"><data-lsp lsp='(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps&lt;React.ButtonHTMLAttributes&lt;HTMLButtonElement>, HTMLButtonElement>' >button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(property) React.DOMAttributes&lt;HTMLButtonElement>.onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #E5C07B"><data-lsp lsp='const beautifulDialog: {&#10;    open: (props: Record&lt;string, any> &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >beautifulDialog</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) open: (props: Record&lt;string, any> &amp; Partial&lt;ModalProps>) => void' >open</data-lsp></span><span style="color: #ABB2BF">({});</span></div><div class='line'><span style="color: #ABB2BF">                }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            &gt;</span></div><div class='line'><span style="color: #ABB2BF">                \u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043C\u043E\u0434\u0430\u043B\u043A\u0443</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E06C75"><data-lsp lsp='(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps&lt;React.ButtonHTMLAttributes&lt;HTMLButtonElement>, HTMLButtonElement>' >button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">}</span></div></code></div></pre>`}),`
`,l(a.p,{children:[`\u0411\u044B\u0432\u0430\u044E\u0442 \u0441\u043B\u0443\u0447\u0430\u0438, \u043A\u043E\u0433\u0434\u0430 \u043D\u0435\u043E\u0431\u0445\u043E\u0434\u0438\u043C\u043E \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0430\u0442\u044C \u0438 \u0441\u043A\u0440\u044B\u0432\u0430\u0442\u044C \u043C\u043E\u0434\u0430\u043B\u043A\u0443 \u043F\u0440\u0438 \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0438
\u0441\u0442\u0435\u0439\u0442\u0430 \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F. \u0412 \u043A\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043F\u0440\u0438\u043C\u0435\u0440\u0430 \u043C\u043E\u0436\u043D\u043E \u043F\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043F\u043E\u043F\u0443\u043B\u044F\u0440\u043D\u044B\u0439 \u043F\u0430\u0442\u0442\u0435\u0440\u043D, \u043A\u043E\u0433\u0434\u0430
\u043F\u0440\u0438 \u043D\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438 (\u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0438 URL) \u043F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0435\u0442\u0441\u044F \u043D\u0435 \u043F\u043E\u043B\u043D\u043E\u0441\u0442\u044C\u044E \u043D\u043E\u0432\u0430\u044F \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430, \u0430
`,s(a.a,{href:"/side-page",children:"\u0441\u0430\u0439\u0434\u043F\u0435\u0439\u0434\u0436"}),"."]}),`
`,l(a.p,{children:["\u0414\u043B\u044F \u0442\u0430\u043A\u0438\u0445 \u0446\u0435\u043B\u0435\u0439 \u0435\u0441\u0442\u044C \u043C\u0435\u0442\u043E\u0434 ",s(a.code,{children:"createModalComponent"}),`, \u043A\u043E\u0442\u043E\u0440\u044B\u0439 \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u0442\u0435 \u0436\u0435
\u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B, \u0447\u0442\u043E \u0438 `,s(a.code,{children:"createModal"}),`, \u043D\u043E \u0432\u043C\u0435\u0441\u0442\u043E \u0438\u043C\u043F\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u044B\u0445 \u043C\u0435\u0442\u043E\u0434\u043E\u0432 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 React
\u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442. \u0412 \u044D\u0442\u043E\u043C \u0441\u043B\u0443\u0447\u0430\u0435 \u0432\u044B \u0441\u0430\u043C\u0438 \u043F\u043E\u043B\u043D\u043E\u0441\u0442\u044C\u044E \u043A\u043E\u043D\u0442\u0440\u043E\u043B\u0438\u0440\u0443\u0435\u0442\u0435 \u043A\u0430\u043A \u043F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0442\u044C \u0438
\u0441\u043A\u0440\u044B\u0432\u0430\u0442\u044C \u043C\u043E\u0434\u0430\u043B\u043A\u0443.`]}),`
`,s(o,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) function createModalComponent&lt;Props extends Record&lt;string, any>>(args: CreateModalArgs&lt;Props>): (props: Props &amp; ModalProps) => null&#10;import createModalComponent' >createModalComponent</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/modal&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const MyDialog: (props: Record&lt;string, any> &amp; ModalProps) => null' >MyDialog</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF"><data-lsp lsp='(alias) createModalComponent&lt;Record&lt;string, any>>(args: CreateModalArgs&lt;Record&lt;string, any>>): (props: Record&lt;string, any> &amp; ModalProps) => null&#10;import createModalComponent' >createModalComponent</data-lsp></span><span style="color: #ABB2BF">({</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) CreateModalArgs&lt;Props extends Record&lt;string, any>>.kind: ModalKind' >kind</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;dialog&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #61AFEF"><data-lsp lsp='(method) CreateModalArgs&lt;Record&lt;string, any>>.component(this: void, props: Record&lt;string, any> &amp; ModalProps): JSX.Element' >component</data-lsp></span><span style="color: #ABB2BF">: () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> &lt;&gt;...&lt;/&gt;,</span></div><div class='line'><span style="color: #ABB2BF">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">function</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF"><data-lsp lsp='function App(): JSX.Element' >App</data-lsp></span><span style="color: #ABB2BF">() {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> [</span><span style="color: #E5C07B"><data-lsp lsp='const isOpen: boolean' >isOpen</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B"><data-lsp lsp='const setIsOpen: React.Dispatch&lt;React.SetStateAction&lt;boolean>>' >setIsOpen</data-lsp></span><span style="color: #ABB2BF">] </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='function React.useState&lt;boolean>(initialState: boolean | (() => boolean)): [boolean, React.Dispatch&lt;React.SetStateAction&lt;boolean>>] (+1 overload)' >useState</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;&gt;</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const isOpen: boolean' >isOpen</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">?</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='const MyDialog: (props: Record&lt;string, any> &amp; ModalProps) => null' >MyDialog</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #7F848E">// \u041E\u0431\u044F\u0437\u0430\u0442\u0435\u043B\u044C\u043D\u044B\u0439 \u043F\u0440\u043E\u043F</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(method) ModalProps.onDismiss(this: void): void' >onDismiss</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #61AFEF"><data-lsp lsp='const setIsOpen: (value: React.SetStateAction&lt;boolean>) => void' >setIsOpen</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">                    }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                /&gt;</span></div><div class='line'><span style="color: #ABB2BF">            ) </span><span style="color: #C678DD">:</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">null</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">}</span></div></code></div></pre>`}),`
`,s(a.h2,{children:"\u0420\u0430\u0437\u043C\u0435\u0440\u044B"}),`
`,s(a.p,{children:`\u0414\u0438\u0430\u043B\u043E\u0433 \u0438 \u0441\u0430\u0439\u0434\u043F\u0435\u0439\u0434\u0436 \u043F\u043E-\u0443\u043C\u043E\u043B\u0447\u0430\u043D\u0438\u044E \u0438\u043C\u0435\u044E\u0442 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u044B\u0435 \u0440\u0430\u0437\u043C\u0435\u0440\u044B. \u0428\u0438\u0440\u0438\u043D\u0430 \u0438 \u0432\u044B\u0441\u043E\u0442\u0430
\u0432\u0441\u0435\u0433\u0434\u0430 \u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u044B \u043E\u043A\u043D\u043E\u043C \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0430 \u0438 \u043D\u0438\u043A\u043E\u0433\u0434\u0430 \u043D\u0435 \u0432\u044B\u0445\u043E\u0434\u044F\u0442 \u0437\u0430 \u0435\u0433\u043E \u043F\u0440\u0435\u0434\u0435\u043B\u044B. \u041A\u043E\u0433\u0434\u0430
\u043A\u043E\u043D\u0442\u0435\u043D\u0442 \u043D\u0435 \u043F\u043E\u043C\u0435\u0449\u0430\u0435\u0442\u0441\u044F, \u043F\u043E\u044F\u0432\u044F\u0442\u0441\u044F \u0441\u043A\u0440\u043E\u043B\u043B\u0431\u0430\u0440\u044B.`}),`
`,l(a.p,{children:[`\u0415\u0441\u043B\u0438 \u0436\u0435 \u0432\u0430\u043C \u043D\u0435\u043E\u0431\u0445\u043E\u0434\u0438\u043C\u043E \u0438\u0437\u043C\u0435\u043D\u0438\u0442\u044C \u0440\u0430\u0437\u043C\u0435\u0440\u044B, \u0442\u043E \u043F\u043E\u043C\u0438\u043C\u043E \u043E\u0431\u044F\u0437\u0430\u0442\u0435\u043B\u044C\u043D\u044B\u0445 \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u043E\u0432
`,s(a.code,{children:"kind"})," \u0438 ",s(a.code,{children:"component"}),`, \u0444\u0443\u043D\u043A\u0446\u0438\u0438 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F \u043C\u043E\u0434\u0430\u043B\u043E\u043A \u0442\u0430\u043A\u0436\u0435 \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u044E\u0442 \u043D\u0435\u043E\u0431\u044F\u0437\u0430\u0442\u0435\u043B\u044C\u043D\u044B\u0435
`,s(a.code,{children:"maxWidth"})," \u0438 ",s(a.code,{children:"maxHeight"}),`. \u0428\u0438\u0440\u0438\u043D\u0430 \u0434\u0438\u0430\u043B\u043E\u0433\u0430 \u0438 \u0441\u0430\u0439\u0434\u043F\u0435\u0439\u0434\u0436\u0430 \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043A\u0441\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u0430\u044F \u0438
\u043C\u0435\u043D\u044F\u0435\u0442\u0441\u044F \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u043E\u043C `,s(a.code,{children:"maxWidth"}),`. \u0412\u044B\u0441\u043E\u0442\u0430 \u0434\u0438\u0430\u043B\u043E\u0433\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043E\u0442 \u0440\u0430\u0437\u043C\u0435\u0440\u0430 \u043A\u043E\u043D\u0442\u0435\u043D\u0442\u0430
\u0432\u043D\u0443\u0442\u0440\u0438, \u0435\u0451 \u043C\u043E\u0436\u043D\u043E \u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0438\u0442\u044C \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u043E\u043C `,s(a.code,{children:"maxHeight"}),`. \u0412\u044B\u0441\u043E\u0442\u0430 \u0441\u0430\u0439\u0434\u043F\u0435\u0439\u0434\u0436\u0430 \u0432\u0441\u0435\u0433\u0434\u0430
100% \u0432\u044B\u0441\u043E\u0442\u044B \u043E\u043A\u043D\u0430, \u0435\u0451 \u043D\u0435\u043B\u044C\u0437\u044F \u0438\u0437\u043C\u0435\u043D\u0438\u0442\u044C.`]}),`
`,l(a.p,{children:["\u0414\u0440\u0443\u0433\u0438\u043C\u0438 \u0441\u043B\u043E\u0432\u0430\u043C\u0438, \u0448\u0438\u0440\u0438\u043D\u0430 \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0432\u043D\u0430 ",s(a.code,{children:"maxWidth"}),` \u0438\u043B\u0438 \u043C\u0435\u043D\u044C\u0448\u0435, \u0430 \u0432\u044B\u0441\u043E\u0442\u0430 \u043A\u0430\u043A
\u043A\u043E\u043D\u0442\u0435\u043D\u0442, \u043D\u043E \u043D\u0435 \u0431\u043E\u043B\u044C\u0448\u0435 `,s(a.code,{children:"maxHeight"}),"."]}),`
`,s(o,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) function createModal&lt;Props extends Record&lt;string, any>>(args: CreateModalArgs&lt;Props>): {&#10;    open: (props: Props &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}&#10;import createModal' >createModal</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/modal&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/button&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const simpleDialog: {&#10;    open: (props: Record&lt;string, any> &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >simpleDialog</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF"><data-lsp lsp='(alias) createModal&lt;Record&lt;string, any>>(args: CreateModalArgs&lt;Record&lt;string, any>>): {&#10;    open: (props: Record&lt;string, any> &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}&#10;import createModal' >createModal</data-lsp></span><span style="color: #ABB2BF">({</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) CreateModalArgs&lt;Props extends Record&lt;string, any>>.kind: ModalKind' >kind</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;dialog&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) CreateModalArgs&lt;Props extends Record&lt;string, any>>.maxWidth?: number' >maxWidth</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">800</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) CreateModalArgs&lt;Props extends Record&lt;string, any>>.maxHeight?: number' >maxHeight</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">300</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #61AFEF"><data-lsp lsp='(method) CreateModalArgs&lt;Record&lt;string, any>>.component(this: void, props: Record&lt;string, any> &amp; ModalProps): JSX.Element' >component</data-lsp></span><span style="color: #ABB2BF">: () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;&gt;</span></div><div class='line'><span style="color: #ABB2BF">            maxWidth: 800</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E06C75"><data-lsp lsp='(property) JSX.IntrinsicElements.br: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLBRElement>, HTMLBRElement>' >br</data-lsp></span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">            maxHeight: 300</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">[...</span><span style="color: #E5C07B"><data-lsp lsp='var Array: ArrayConstructor&#10;(arrayLength?: number | undefined) => any[] (+2 overloads)' >Array</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">).</span><span style="color: #61AFEF"><data-lsp lsp='(method) Array&lt;any>.keys(): IterableIterator&lt;number>' >keys</data-lsp></span><span style="color: #ABB2BF">()].</span><span style="color: #61AFEF"><data-lsp lsp='(method) Array&lt;number>.map&lt;JSX.Element>(callbackfn: (value: number, index: number, array: number[]) => JSX.Element, thisArg?: any): JSX.Element[]' >map</data-lsp></span><span style="color: #ABB2BF">(() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const LOREM_IPSUM: JSX.Element' >LOREM_IPSUM</data-lsp></span><span style="color: #ABB2BF">)</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/&gt;</span></div><div class='line'><span style="color: #ABB2BF">    ),</span></div><div class='line'><span style="color: #ABB2BF">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.kind?: ButtonKind' >kind</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonKind.SECONDARY = "secondary"' >SECONDARY</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.size?: ButtonSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonSize.L = "l"' >L</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #E5C07B"><data-lsp lsp='const simpleDialog: {&#10;    open: (props: Record&lt;string, any> &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >simpleDialog</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) open: (props: Record&lt;string, any> &amp; Partial&lt;ModalProps>) => void' >open</data-lsp></span><span style="color: #ABB2BF">({});</span></div><div class='line'><span style="color: #ABB2BF">            }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">        &gt;</span></div><div class='line'><span style="color: #ABB2BF">            \u041E\u0442\u043A\u0440\u044B\u0442\u044C</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{Text:r}=M,i=s(r,{tag:"p",children:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."}),{createModal:d}=C,{Button:c,ButtonKind:n,ButtonSize:p}=D,t=d({kind:"dialog",maxWidth:800,maxHeight:300,component:()=>l(A,{children:["maxWidth: 800",s(a.br,{}),"maxHeight: 300",[...Array(5).keys()].map(()=>i)]})});return()=>s(c,{kind:n.SECONDARY,size:p.L,onClick:()=>{t.open({})},children:"\u041E\u0442\u043A\u0440\u044B\u0442\u044C"})}}),`
`,s(a.h2,{children:"\u041A\u043E\u043D\u0442\u0435\u043D\u0442"}),`
`,s(a.p,{children:`\u0411\u0438\u0431\u043B\u0438\u043E\u0442\u0435\u043A\u0430 \u043D\u0435 \u043D\u0430\u0432\u044F\u0437\u044B\u0432\u0430\u0435\u0442 \u0436\u0451\u0441\u0442\u043A\u0438\u0445 \u043F\u0440\u0430\u0432\u0438\u043B \u043F\u043E \u043D\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044E \u043C\u043E\u0434\u0430\u043B\u043E\u043A, \u0430 \u0432\u043C\u0435\u0441\u0442\u043E \u044D\u0442\u043E\u0433\u043E
\u043F\u0440\u0435\u0434\u043E\u0441\u0442\u0430\u0432\u043B\u044F\u0435\u0442 \u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u044B \u0434\u043B\u044F \u0437\u0430\u043A\u0440\u044B\u0442\u0438\u044F \u0431\u0430\u0437\u043E\u0432\u044B\u0445 \u043F\u043E\u0442\u0440\u0435\u0431\u043D\u043E\u0441\u0442\u0435\u0439:`}),`
`,l(a.ul,{children:[`
`,l(a.li,{children:[s(a.code,{children:"<ModalTitle>"})," \u2014 \u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A."]}),`
`,l(a.li,{children:[s(a.code,{children:"<ModalDescription>"}),` \u2014 \u043A\u043E\u0440\u043E\u0442\u043A\u043E\u0435 \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435. \u041D\u0438\u043A\u043E\u0433\u0434\u0430 \u043D\u0435 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439\u0442\u0435 \u0434\u043B\u044F \u0432\u0441\u0435\u0433\u043E
\u043A\u043E\u043D\u0442\u0435\u043D\u0442\u0430, \u0430 \u0442\u043E\u043B\u044C\u043A\u043E \u0434\u043B\u044F \u0432\u0432\u043E\u0434\u043D\u043E\u0433\u043E \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u043F\u043E\u0434 \u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u043E\u043C. \u0415\u0441\u043B\u0438 \u0442\u0430\u043A\u043E\u0433\u043E
\u043A\u043E\u0440\u043E\u0442\u043A\u043E\u0433\u043E \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u043D\u0435\u0442, \u0442\u043E \u043B\u0443\u0447\u0448\u0435 \u044D\u0442\u043E\u0442 \u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442 \u0432\u043E\u043E\u0431\u0449\u0435 \u043D\u0435 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C.`]}),`
`,l(a.li,{children:[s(a.code,{children:"<ModalButtons>"}),` \u2014 \u0440\u044F\u0434 \u043A\u043D\u043E\u043F\u043E\u043A, \u0432\u0441\u0435\u0433\u0434\u0430 \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044F \u0441\u043D\u0438\u0437\u0443 \u0438 \u043D\u0435 \u0441\u043A\u0440\u043E\u043B\u043B\u0438\u0442\u0441\u044F
\u0432\u043C\u0435\u0441\u0442\u0435 \u0441 \u043A\u043E\u043D\u0442\u0435\u043D\u0442\u043E\u043C.`]}),`
`]}),`
`,s(o,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) function createModal&lt;Props extends Record&lt;string, any>>(args: CreateModalArgs&lt;Props>): {&#10;    open: (props: Props &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}&#10;import createModal' >createModal</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) function ModalDescription({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalDescription' >ModalDescription</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) function ModalButtons({ children }: ModalButtonsProps): JSX.Element&#10;import ModalButtons' >ModalButtons</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">} </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/modal&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/button&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const simpleDialog: {&#10;    open: (props: Record&lt;string, any> &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >simpleDialog</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF"><data-lsp lsp='(alias) createModal&lt;Record&lt;string, any>>(args: CreateModalArgs&lt;Record&lt;string, any>>): {&#10;    open: (props: Record&lt;string, any> &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}&#10;import createModal' >createModal</data-lsp></span><span style="color: #ABB2BF">({</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) CreateModalArgs&lt;Props extends Record&lt;string, any>>.kind: ModalKind' >kind</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;dialog&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #61AFEF"><data-lsp lsp='(method) CreateModalArgs&lt;Record&lt;string, any>>.component(this: void, props: Record&lt;string, any> &amp; ModalProps): JSX.Element' >component</data-lsp></span><span style="color: #ABB2BF">({ </span><span style="color: #E06C75"><data-lsp lsp='(parameter) onDismiss: (this: void) => void' >onDismiss</data-lsp></span><span style="color: #ABB2BF"> }) {</span></div><div class='line'><span style="color: #ABB2BF">        </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> [</span><span style="color: #E5C07B"><data-lsp lsp='const size: number' >size</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B"><data-lsp lsp='const setSize: React.Dispatch&lt;React.SetStateAction&lt;number>>' >setSize</data-lsp></span><span style="color: #ABB2BF">] </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='function React.useState&lt;number>(initialState: number | (() => number)): [number, React.Dispatch&lt;React.SetStateAction&lt;number>>] (+1 overload)' >useState</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">            &lt;&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">&gt;\u0417\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalDescription({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalDescription' >ModalDescription</data-lsp></span><span style="color: #ABB2BF">&gt;\u0414\u043E\u0431\u0430\u0432\u044C\u0442\u0435 \u043A\u043E\u043D\u0442\u0435\u043D\u0442\u0430!&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalDescription({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalDescription' >ModalDescription</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">[...</span><span style="color: #E5C07B"><data-lsp lsp='var Array: ArrayConstructor&#10;(arrayLength?: number | undefined) => any[] (+2 overloads)' >Array</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #E06C75"><data-lsp lsp='const size: number' >size</data-lsp></span><span style="color: #ABB2BF">).</span><span style="color: #61AFEF"><data-lsp lsp='(method) Array&lt;any>.keys(): IterableIterator&lt;number>' >keys</data-lsp></span><span style="color: #ABB2BF">()].</span><span style="color: #61AFEF"><data-lsp lsp='(method) Array&lt;number>.map&lt;JSX.Element>(callbackfn: (value: number, index: number, array: number[]) => JSX.Element, thisArg?: any): JSX.Element[]' >map</data-lsp></span><span style="color: #ABB2BF">(() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const LOREM_IPSUM: JSX.Element' >LOREM_IPSUM</data-lsp></span><span style="color: #ABB2BF">)</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalButtons({ children }: ModalButtonsProps): JSX.Element&#10;import ModalButtons' >ModalButtons</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                    &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.size?: ButtonSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonSize.L = "l"' >L</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #D19A66"><data-lsp lsp='(property) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                            </span><span style="color: #61AFEF"><data-lsp lsp='const setSize: (value: React.SetStateAction&lt;number>) => void' >setSize</data-lsp></span><span style="color: #ABB2BF">((</span><span style="color: #E06C75"><data-lsp lsp='(parameter) s: number' >s</data-lsp></span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75"><data-lsp lsp='(parameter) s: number' >s</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">                        }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    &gt;</span></div><div class='line'><span style="color: #ABB2BF">                        \u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C</span></div><div class='line'><span style="color: #ABB2BF">                    &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                    &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.kind?: ButtonKind' >kind</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonKind.PLAIN = "plain"' >PLAIN</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.size?: ButtonSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonSize.L = "l"' >L</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #D19A66"><data-lsp lsp='(property) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(parameter) onDismiss: (this: void) => void' >onDismiss</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    &gt;</span></div><div class='line'><span style="color: #ABB2BF">                        \u041E\u0442\u043C\u0435\u043D\u0430</span></div><div class='line'><span style="color: #ABB2BF">                    &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalButtons({ children }: ModalButtonsProps): JSX.Element&#10;import ModalButtons' >ModalButtons</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/&gt;</span></div><div class='line'><span style="color: #ABB2BF">        );</span></div><div class='line'><span style="color: #ABB2BF">    },</span></div><div class='line'><span style="color: #ABB2BF">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.kind?: ButtonKind' >kind</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonKind.SECONDARY = "secondary"' >SECONDARY</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.size?: ButtonSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonSize.L = "l"' >L</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #E5C07B"><data-lsp lsp='const simpleDialog: {&#10;    open: (props: Record&lt;string, any> &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >simpleDialog</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) open: (props: Record&lt;string, any> &amp; Partial&lt;ModalProps>) => void' >open</data-lsp></span><span style="color: #ABB2BF">({});</span></div><div class='line'><span style="color: #ABB2BF">            }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">        &gt;</span></div><div class='line'><span style="color: #ABB2BF">            \u041E\u0442\u043A\u0440\u044B\u0442\u044C</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{Text:r}=M,i=s(r,{tag:"p",children:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."}),{createModal:d,ModalTitle:c,ModalDescription:n,ModalButtons:p}=C,{Button:t,ButtonKind:y,ButtonSize:m}=D,e=d({kind:"dialog",component({onDismiss:B}){const[F,g]=b.exports.useState(0);return l(A,{children:[s(c,{children:"\u0417\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A"}),s(n,{children:"\u0414\u043E\u0431\u0430\u0432\u044C\u0442\u0435 \u043A\u043E\u043D\u0442\u0435\u043D\u0442\u0430!"}),[...Array(F).keys()].map(()=>i),l(p,{children:[s(t,{size:m.L,onClick:()=>{g(P=>P+1)},children:"\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C"}),s(t,{kind:y.PLAIN,size:m.L,onClick:B,children:"\u041E\u0442\u043C\u0435\u043D\u0430"})]})]})}});return()=>s(t,{kind:y.SECONDARY,size:m.L,onClick:()=>{e.open({})},children:"\u041E\u0442\u043A\u0440\u044B\u0442\u044C"})}}),`
`,s(a.h2,{children:"\u041F\u0440\u043E\u043F\u044B [#props]"}),`
`,l(a.p,{children:[`\u041F\u0440\u0438 \u043E\u0442\u043A\u0440\u044B\u0442\u0438\u0438 \u043C\u043E\u0434\u0430\u043B\u043A\u0438 \u0432 \u043D\u0435\u0451 \u043C\u043E\u0436\u043D\u043E \u043F\u0435\u0440\u0435\u0434\u0430\u0442\u044C \u043F\u0440\u043E\u043F\u044B, \u0437\u0430\u043C\u0435\u043D\u044F\u044F \u043A\u0430\u043A \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B \u043F\u043E
\u0443\u043C\u043E\u043B\u0447\u0430\u043D\u0438\u044E \u2014 `,s(a.code,{children:"onDismiss"}),", ",s(a.code,{children:"maxWidth"})," \u0438 ",s(a.code,{children:"maxHeight"}),`, \u0442\u0430\u043A \u0438 \u043F\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u044F \u043A\u0430\u0441\u0442\u043E\u043C\u043D\u044B\u0435.
\u042D\u0442\u0438 \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B \u043F\u0435\u0440\u0435\u0434\u0430\u044E\u0442\u0441\u044F \u043A\u0430\u043A \u043F\u0440\u043E\u043F\u044B \u0432 \u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442 \u043A\u043E\u043D\u0442\u0435\u043D\u0442\u0430.`]}),`
`,s(o,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) function createModal&lt;Props extends Record&lt;string, any>>(args: CreateModalArgs&lt;Props>): {&#10;    open: (props: Props &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}&#10;import createModal' >createModal</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/modal&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const beautifulDialog: {&#10;    open: (props: Record&lt;string, any> &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >beautifulDialog</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF"><data-lsp lsp='(alias) createModal&lt;Record&lt;string, any>>(args: CreateModalArgs&lt;Record&lt;string, any>>): {&#10;    open: (props: Record&lt;string, any> &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}&#10;import createModal' >createModal</data-lsp></span><span style="color: #ABB2BF">({</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) CreateModalArgs&lt;Props extends Record&lt;string, any>>.kind: ModalKind' >kind</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;dialog&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #61AFEF"><data-lsp lsp='(method) CreateModalArgs&lt;Record&lt;string, any>>.component(this: void, props: Record&lt;string, any> &amp; ModalProps): JSX.Element' >component</data-lsp></span><span style="color: #ABB2BF">: () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">&gt;Hello world!&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">&gt;,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) CreateModalArgs&lt;Props extends Record&lt;string, any>>.maxWidth?: number' >maxWidth</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">600</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) CreateModalArgs&lt;Props extends Record&lt;string, any>>.maxHeight?: number' >maxHeight</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">420</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #7F848E">// \u0418\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u044E\u0442\u0441\u044F \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B \u043F\u043E-\u0443\u043C\u043E\u043B\u0447\u0430\u043D\u0438\u044E</span></div><div class='line'><span style="color: #E5C07B"><data-lsp lsp='const beautifulDialog: {&#10;    open: (props: Record&lt;string, any> &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >beautifulDialog</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) open: (props: Record&lt;string, any> &amp; Partial&lt;ModalProps>) => void' >open</data-lsp></span><span style="color: #ABB2BF">({});</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #7F848E">// \u0410 \u0442\u0430\u043A \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C\u0441\u044F \u043D\u043E\u0432\u044B\u0435 \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B.</span></div><div class='line'><span style="color: #7F848E">// \u041F\u043E\u0432\u0442\u043E\u0440\u043D\u044B\u0435 \u0432\u044B\u0437\u043E\u0432\u044B \`open\` \u0432\u044B\u0437\u044B\u0432\u0430\u044E\u0442 \u043F\u0435\u0440\u0435\u0440\u0435\u043D\u0434\u0435\u0440 \u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u0430 \u0441 \u043D\u043E\u0432\u044B\u043C\u0438 \u043F\u0440\u043E\u043F\u0430\u043C\u0438</span></div><div class='line'><span style="color: #E5C07B"><data-lsp lsp='const beautifulDialog: {&#10;    open: (props: Record&lt;string, any> &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >beautifulDialog</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) open: (props: Record&lt;string, any> &amp; Partial&lt;ModalProps>) => void' >open</data-lsp></span><span style="color: #ABB2BF">({</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #61AFEF"><data-lsp lsp='(method) onDismiss?(this: void): void' >onDismiss</data-lsp></span><span style="color: #ABB2BF">() {</span></div><div class='line'><span style="color: #ABB2BF">        </span><span style="color: #7F848E">// \u0422\u0443\u0442 \u043C\u043E\u0436\u043D\u043E \u0434\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0441\u0432\u043E\u044E \u043B\u043E\u0433\u0438\u043A\u0443 \u0438 \u0441\u0430\u0439\u0434 \u044D\u0444\u0444\u0435\u043A\u0442\u044B \u043F\u0440\u0438 \u0437\u0430\u043A\u0440\u044B\u0442\u0438\u0438 \u043C\u043E\u0434\u0430\u043B\u043A\u0438.</span></div><div class='line'><span style="color: #ABB2BF">        </span><span style="color: #7F848E">// \u041D\u0430\u043F\u0440\u0438\u043C\u0435\u0440, \u0435\u0441\u043B\u0438 \u0432\u043D\u0443\u0442\u0440\u0438 \u0441\u0430\u0439\u0434\u043F\u0435\u0439\u0434\u0436\u0430 \u0435\u0441\u0442\u044C \u0444\u043E\u0440\u043C\u0430, \u0442\u043E \u043C\u044B \u043C\u043E\u0436\u0435\u043C \u0437\u0430\u043F\u0440\u0435\u0442\u0438\u0442\u044C \u0435\u0451</span></div><div class='line'><span style="color: #ABB2BF">        </span><span style="color: #7F848E">// \u0437\u0430\u043A\u0440\u044B\u0432\u0430\u0442\u044C, \u0447\u0442\u043E\u0431\u044B \u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u043D\u044B\u0435 \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u043C \u0434\u0430\u043D\u043D\u044B\u0435 \u043D\u0435 \u043F\u043E\u0442\u0435\u0440\u044F\u043B\u0438\u0441\u044C.</span></div><div class='line'><span style="color: #ABB2BF">        </span><span style="color: #7F848E">// \u0414\u043B\u044F \u0437\u0430\u043A\u0440\u044B\u0442\u0438\u044F \u043D\u0443\u0436\u043D\u043E \u0432\u044B\u0437\u0432\u0430\u0442\u044C dismiss()</span></div><div class='line'><span style="color: #ABB2BF">        </span><span style="color: #E5C07B"><data-lsp lsp='const beautifulDialog: {&#10;    open: (props: Record&lt;string, any> &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >beautifulDialog</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) dismiss: () => void' >dismiss</data-lsp></span><span style="color: #ABB2BF">();</span></div><div class='line'><span style="color: #ABB2BF">    },</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) maxWidth?: number' >maxWidth</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">420</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) maxHeight?: number' >maxHeight</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">300</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">});</span></div></code></div></pre>`}),`
`,s(a.p,{children:`\u0422\u0430\u043A\u0438\u043C \u0436\u0435 \u043E\u0431\u0440\u0430\u0437\u043E\u043C \u043C\u043E\u0436\u043D\u043E \u043F\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044C \u043B\u044E\u0431\u044B\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 \u0434\u0430\u043D\u043D\u044B\u0435 \u0432 \u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442 \u043A\u043E\u043D\u0442\u0435\u043D\u0442\u0430, \u043F\u0440\u0438
\u044D\u0442\u043E\u043C \u0441 \u043F\u043E\u043B\u043D\u043E\u0439 \u0442\u0438\u043F\u0438\u0437\u0430\u0446\u0438\u0435\u0439!`}),`
`,s(o,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) function createModal&lt;Props extends Record&lt;string, any>>(args: CreateModalArgs&lt;Props>): {&#10;    open: (props: Props &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}&#10;import createModal' >createModal</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/modal&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">interface</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='interface BeautifulDialogProps' >BeautifulDialogProps</data-lsp></span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) BeautifulDialogProps.title: string' >title</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #E5C07B">string</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #ABB2BF">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const beautifulDialog: {&#10;    open: (props: BeautifulDialogProps &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >beautifulDialog</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF"><data-lsp lsp='(alias) createModal&lt;BeautifulDialogProps>(args: CreateModalArgs&lt;BeautifulDialogProps>): {&#10;    open: (props: BeautifulDialogProps &amp; Partial&lt;...>) => void;&#10;    dismiss: () => void;&#10;}&#10;import createModal' >createModal</data-lsp></span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B"><data-lsp lsp='interface BeautifulDialogProps' >BeautifulDialogProps</data-lsp></span><span style="color: #ABB2BF">&gt;({</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) CreateModalArgs&lt;BeautifulDialogProps>.kind: ModalKind' >kind</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;dialog&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #61AFEF"><data-lsp lsp='(method) CreateModalArgs&lt;BeautifulDialogProps>.component(this: void, props: BeautifulDialogProps &amp; ModalProps): JSX.Element' >component</data-lsp></span><span style="color: #ABB2BF">: ({ </span><span style="color: #E06C75"><data-lsp lsp='(parameter) title: string' >title</data-lsp></span><span style="color: #ABB2BF"> }) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(parameter) title: string' >title</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">&gt;,</span></div><div class='line'><span style="color: #ABB2BF">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #7F848E">// \u0422\u0435\u043F\u0435\u0440\u044C \`title\` \u043E\u0431\u044F\u0437\u0430\u0442\u0435\u043B\u044C\u043D\u044B\u0439 \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440</span></div><div class='line'><span style="color: #E5C07B"><data-lsp lsp='const beautifulDialog: {&#10;    open: (props: BeautifulDialogProps &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >beautifulDialog</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) open: (props: BeautifulDialogProps &amp; Partial&lt;ModalProps>) => void' >open</data-lsp></span><span style="color: #ABB2BF">(<data-err>{}</data-err>);</span></div><span class="error"><span>Argument of type '{}' is not assignable to parameter of type 'BeautifulDialogProps & Partial&lt;ModalProps&gt;'.
Property 'title' is missing in type '{}' but required in type 'BeautifulDialogProps'.</span><span class="code">2345</span></span><span class="error-behind">Argument of type '{}' is not assignable to parameter of type 'BeautifulDialogProps & Partial&lt;ModalProps&gt;'.
Property 'title' is missing in type '{}' but required in type 'BeautifulDialogProps'.</span><div class='line'>&nbsp;</div><div class='line'><span style="color: #E5C07B"><data-lsp lsp='const beautifulDialog: {&#10;    open: (props: BeautifulDialogProps &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >beautifulDialog</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) open: (props: BeautifulDialogProps &amp; Partial&lt;ModalProps>) => void' >open</data-lsp></span><span style="color: #ABB2BF">({</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) BeautifulDialogProps.title: string' >title</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;Hello world!&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">});</span></div></code></div></pre>`}),`
`,l(a.p,{children:["\u0415\u0441\u043B\u0438 \u0432\u044B \u043F\u0440\u0438 \u044D\u0442\u043E\u043C \u0445\u043E\u0442\u0438\u0442\u0435 \u0432\u044B\u043D\u0435\u0441\u0442\u0438 \u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442 \u043A\u043E\u043D\u0442\u0435\u043D\u0442\u0430 \u0438\u0437 ",s(a.code,{children:"createModal"}),` \u0438\u043B\u0438
`,s(a.code,{children:"createModalComponent"}),", \u0442\u043E \u043C\u043E\u0436\u043D\u043E \u044D\u0442\u043E \u0441\u0434\u0435\u043B\u0430\u0442\u044C, \u043D\u0430\u043F\u0440\u0438\u043C\u0435\u0440, \u0442\u0430\u043A:"]}),`
`,s(o,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) function createModal&lt;Props extends Record&lt;string, any>>(args: CreateModalArgs&lt;Props>): {&#10;    open: (props: Props &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}&#10;import createModal' >createModal</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) interface ModalProps&#10;import ModalProps' >ModalProps</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/modal&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">function</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF"><data-lsp lsp='function BeautifulDialogContent({ title }: {&#10;    title: string;&#10;} &amp; ModalProps): JSX.Element' >BeautifulDialogContent</data-lsp></span><span style="color: #ABB2BF">({ </span><span style="color: #E06C75"><data-lsp lsp='(parameter) title: string' >title</data-lsp></span><span style="color: #ABB2BF"> }: { </span><span style="color: #E06C75"><data-lsp lsp='(property) title: string' >title</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #E5C07B">string</span><span style="color: #ABB2BF"> } & </span><span style="color: #E5C07B"><data-lsp lsp='(alias) interface ModalProps&#10;import ModalProps' >ModalProps</data-lsp></span><span style="color: #ABB2BF">) {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(parameter) title: string' >title</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">&gt;;</span></div><div class='line'><span style="color: #ABB2BF">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const beautifulDialog: {&#10;    open: (props: {&#10;        title: string;&#10;    } &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >beautifulDialog</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF"><data-lsp lsp='(alias) createModal&lt;{&#10;    title: string;&#10;}>(args: CreateModalArgs&lt;{&#10;    title: string;&#10;}>): {&#10;    open: (props: {&#10;        title: string;&#10;    } &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}&#10;import createModal' >createModal</data-lsp></span><span style="color: #ABB2BF">({</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) CreateModalArgs&lt;Props extends Record&lt;string, any>>.kind: ModalKind' >kind</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;dialog&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(method) CreateModalArgs&lt;{ title: string; }>.component(this: void, props: {&#10;    title: string;&#10;} &amp; ModalProps): JSX.Element' >component</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #E06C75"><data-lsp lsp='function BeautifulDialogContent({ title }: {&#10;    title: string;&#10;} &amp; ModalProps): JSX.Element' >BeautifulDialogContent</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #7F848E">// \u0422\u0443\u0442 \`title\` \u0442\u0430\u043A\u0436\u0435 \u043E\u0431\u044F\u0437\u0430\u0442\u0435\u043B\u044C\u043D\u044B\u0439 \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440</span></div><div class='line'><span style="color: #E5C07B"><data-lsp lsp='const beautifulDialog: {&#10;    open: (props: {&#10;        title: string;&#10;    } &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >beautifulDialog</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) open: (props: {&#10;    title: string;&#10;} &amp; Partial&lt;ModalProps>) => void' >open</data-lsp></span><span style="color: #ABB2BF">(<data-err>{}</data-err>);</span></div><span class="error"><span>Argument of type '{}' is not assignable to parameter of type '{ title: string; } & Partial&lt;ModalProps&gt;'.
Property 'title' is missing in type '{}' but required in type '{ title: string; }'.</span><span class="code">2345</span></span><span class="error-behind">Argument of type '{}' is not assignable to parameter of type '{ title: string; } & Partial&lt;ModalProps&gt;'.
Property 'title' is missing in type '{}' but required in type '{ title: string; }'.</span><div class='line'>&nbsp;</div><div class='line'><span style="color: #E5C07B"><data-lsp lsp='const beautifulDialog: {&#10;    open: (props: {&#10;        title: string;&#10;    } &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >beautifulDialog</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) open: (props: {&#10;    title: string;&#10;} &amp; Partial&lt;ModalProps>) => void' >open</data-lsp></span><span style="color: #ABB2BF">({</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) title: string' >title</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;Hello world!&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">});</span></div></code></div></pre>`}),`
`,s(a.h2,{children:"\u041D\u0430\u043B\u043E\u0436\u0435\u043D\u0438\u0435"}),`
`,l(a.p,{children:[`\u041C\u043E\u0434\u0430\u043B\u044C\u043D\u044B\u0435 \u043E\u043A\u043D\u0430 \u043C\u043E\u0433\u0443\u0442 \u043D\u0430\u043A\u043B\u0430\u0434\u044B\u0432\u0430\u0442\u044C\u0441\u044F \u0434\u0440\u0443\u0433 \u043D\u0430 \u0434\u0440\u0443\u0433\u0430 \u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0441\u043F\u043E\u043B\u0430\u0433\u0430\u0442\u044C\u0441\u044F \u0432
\u0442\u043E\u0439 \u0436\u0435 \u043F\u043E\u0441\u043B\u0435\u0434\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u043D\u043E\u0441\u0442\u0438, \u0432 \u043A\u043E\u0442\u043E\u0440\u043E\u0439 \u0431\u044B\u043B\u0438 \u043E\u0442\u043A\u0440\u044B\u0442\u044B. \u0414\u043B\u044F \u043C\u043E\u0434\u0430\u043B\u043E\u043A, \u0441\u043E\u0437\u0434\u0430\u043D\u043D\u044B\u0445
`,s(a.code,{children:"createModalComponent"}),`, \u044D\u0442\u043E \u043C\u043E\u043C\u0435\u043D\u0442 \u043C\u0430\u0443\u043D\u0442\u0430 \u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u0430, \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0432 \u0434\u0435\u0440\u0435\u0432\u0435
\u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u043E\u0432 \u043D\u0435 \u0438\u043C\u0435\u0435\u0442 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F.`]}),`
`,s(o,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) function createModal&lt;Props extends Record&lt;string, any>>(args: CreateModalArgs&lt;Props>): {&#10;    open: (props: Props &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}&#10;import createModal' >createModal</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) function ModalDescription({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalDescription' >ModalDescription</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) function ModalButtons({ children }: ModalButtonsProps): JSX.Element&#10;import ModalButtons' >ModalButtons</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">} </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/modal&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/button&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const confirmDeleteDialog: {&#10;    open: (props: {&#10;        workPermitNumber: number;&#10;        onConfirmDelete(): void;&#10;    } &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >confirmDeleteDialog</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF"><data-lsp lsp='(alias) createModal&lt;{&#10;    workPermitNumber: number;&#10;    onConfirmDelete(): void;&#10;}>(args: CreateModalArgs&lt;{&#10;    workPermitNumber: number;&#10;    onConfirmDelete(): void;&#10;}>): {&#10;    open: (props: {&#10;        workPermitNumber: number;&#10;        onConfirmDelete(): void;&#10;    } &amp; Partial&lt;...>) => void;&#10;    dismiss: () => void;&#10;}&#10;import createModal' >createModal</data-lsp></span><span style="color: #ABB2BF">&lt;{</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) workPermitNumber: number' >workPermitNumber</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #E5C07B">number</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #61AFEF"><data-lsp lsp='(method) onConfirmDelete(): void' >onConfirmDelete</data-lsp></span><span style="color: #ABB2BF">(): </span><span style="color: #E5C07B">void</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #ABB2BF">}&gt;({</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) CreateModalArgs&lt;{ workPermitNumber: number; onConfirmDelete(): void; }>.kind: ModalKind' >kind</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;dialog&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) CreateModalArgs&lt;{ workPermitNumber: number; onConfirmDelete(): void; }>.maxWidth?: number' >maxWidth</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">640</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #61AFEF"><data-lsp lsp='(method) CreateModalArgs&lt;{ workPermitNumber: number; onConfirmDelete(): void; }>.component(this: void, props: {&#10;    workPermitNumber: number;&#10;    onConfirmDelete(): void;&#10;} &amp; ModalProps): JSX.Element' >component</data-lsp></span><span style="color: #ABB2BF">: ({ </span><span style="color: #E06C75"><data-lsp lsp='(parameter) workPermitNumber: number' >workPermitNumber</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(parameter) onConfirmDelete: () => void' >onConfirmDelete</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(parameter) onDismiss: (this: void) => void' >onDismiss</data-lsp></span><span style="color: #ABB2BF"> }) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                \u0412\u044B \u0443\u0432\u0435\u0440\u0435\u043D\u044B, \u0447\u0442\u043E \u0445\u043E\u0442\u0438\u0442\u0435 \u0443\u0434\u0430\u043B\u0438\u0442\u044C \u043D\u0430\u0440\u044F\u0434-\u0434\u043E\u043F\u0443\u0441\u043A \u2116</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(parameter) workPermitNumber: number' >workPermitNumber</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">?</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalDescription({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalDescription' >ModalDescription</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                \u0418\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044E \u0431\u0443\u0434\u0435\u0442 \u043D\u0435\u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E \u0432\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C!</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalDescription({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalDescription' >ModalDescription</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalButtons({ children }: ModalButtonsProps): JSX.Element&#10;import ModalButtons' >ModalButtons</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.size?: ButtonSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonSize.L = "l"' >L</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.kind?: ButtonKind' >kind</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonKind.DANGER = "danger"' >DANGER</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(property) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(parameter) onConfirmDelete: () => void' >onConfirmDelete</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                &gt;</span></div><div class='line'><span style="color: #ABB2BF">                    \u0423\u0434\u0430\u043B\u0438\u0442\u044C</span></div><div class='line'><span style="color: #ABB2BF">                &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.size?: ButtonSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonSize.L = "l"' >L</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.kind?: ButtonKind' >kind</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonKind.PLAIN = "plain"' >PLAIN</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(property) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(parameter) onDismiss: (this: void) => void' >onDismiss</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                &gt;</span></div><div class='line'><span style="color: #ABB2BF">                    \u041E\u0442\u043C\u0435\u043D\u0430</span></div><div class='line'><span style="color: #ABB2BF">                &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalButtons({ children }: ModalButtonsProps): JSX.Element&#10;import ModalButtons' >ModalButtons</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/&gt;</span></div><div class='line'><span style="color: #ABB2BF">    ),</span></div><div class='line'><span style="color: #ABB2BF">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const workPermitSidePage: {&#10;    open: (props: {&#10;        workPermitNumber: number;&#10;    } &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >workPermitSidePage</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF"><data-lsp lsp='(alias) createModal&lt;{&#10;    workPermitNumber: number;&#10;}>(args: CreateModalArgs&lt;{&#10;    workPermitNumber: number;&#10;}>): {&#10;    open: (props: {&#10;        workPermitNumber: number;&#10;    } &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}&#10;import createModal' >createModal</data-lsp></span><span style="color: #ABB2BF">&lt;{ </span><span style="color: #E06C75"><data-lsp lsp='(property) workPermitNumber: number' >workPermitNumber</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #E5C07B">number</span><span style="color: #ABB2BF"> }&gt;({</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) CreateModalArgs&lt;Props extends Record&lt;string, any>>.kind: ModalKind' >kind</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;side-page&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #61AFEF"><data-lsp lsp='(method) CreateModalArgs&lt;{ workPermitNumber: number; }>.component(this: void, props: {&#10;    workPermitNumber: number;&#10;} &amp; ModalProps): JSX.Element' >component</data-lsp></span><span style="color: #ABB2BF">: ({ </span><span style="color: #E06C75"><data-lsp lsp='(parameter) workPermitNumber: number' >workPermitNumber</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(parameter) onDismiss: (this: void) => void' >onDismiss</data-lsp></span><span style="color: #ABB2BF"> }) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">&gt;\u041D\u0430\u0440\u044F\u0434-\u0434\u043E\u043F\u0443\u0441\u043A \u2116</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(parameter) workPermitNumber: number' >workPermitNumber</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalDescription({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalDescription' >ModalDescription</data-lsp></span><span style="color: #ABB2BF">&gt;\u0422\u0443\u0442 \u0432\u0441\u044F\u043A\u0430\u044F \u0440\u0430\u0437\u043D\u0430\u044F \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalDescription({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalDescription' >ModalDescription</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalButtons({ children }: ModalButtonsProps): JSX.Element&#10;import ModalButtons' >ModalButtons</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.size?: ButtonSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonSize.L = "l"' >L</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.kind?: ButtonKind' >kind</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonKind.DANGER = "danger"' >DANGER</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(property) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #E5C07B"><data-lsp lsp='const confirmDeleteDialog: {&#10;    open: (props: {&#10;        workPermitNumber: number;&#10;        onConfirmDelete(): void;&#10;    } &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >confirmDeleteDialog</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) open: (props: {&#10;    workPermitNumber: number;&#10;    onConfirmDelete(): void;&#10;} &amp; Partial&lt;ModalProps>) => void' >open</data-lsp></span><span style="color: #ABB2BF">({</span></div><div class='line'><span style="color: #ABB2BF">                            </span><span style="color: #E06C75"><data-lsp lsp='(property) workPermitNumber: number' >workPermitNumber</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">                            </span><span style="color: #61AFEF"><data-lsp lsp='(method) onConfirmDelete(): void' >onConfirmDelete</data-lsp></span><span style="color: #ABB2BF">() {</span></div><div class='line'><span style="color: #ABB2BF">                                </span><span style="color: #E5C07B"><data-lsp lsp='const confirmDeleteDialog: {&#10;    open: (props: {&#10;        workPermitNumber: number;&#10;        onConfirmDelete(): void;&#10;    } &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >confirmDeleteDialog</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) dismiss: () => void' >dismiss</data-lsp></span><span style="color: #ABB2BF">();</span></div><div class='line'><span style="color: #ABB2BF">                                </span><span style="color: #61AFEF"><data-lsp lsp='(parameter) onDismiss: (this: void) => void' >onDismiss</data-lsp></span><span style="color: #ABB2BF">();</span></div><div class='line'><span style="color: #ABB2BF">                            },</span></div><div class='line'><span style="color: #ABB2BF">                        });</span></div><div class='line'><span style="color: #ABB2BF">                    }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                &gt;</span></div><div class='line'><span style="color: #ABB2BF">                    \u0423\u0434\u0430\u043B\u0438\u0442\u044C</span></div><div class='line'><span style="color: #ABB2BF">                &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.size?: ButtonSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonSize.L = "l"' >L</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.kind?: ButtonKind' >kind</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonKind.PLAIN = "plain"' >PLAIN</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(property) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(parameter) onDismiss: (this: void) => void' >onDismiss</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                &gt;</span></div><div class='line'><span style="color: #ABB2BF">                    \u041E\u0442\u043C\u0435\u043D\u0430</span></div><div class='line'><span style="color: #ABB2BF">                &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalButtons({ children }: ModalButtonsProps): JSX.Element&#10;import ModalButtons' >ModalButtons</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/&gt;</span></div><div class='line'><span style="color: #ABB2BF">    ),</span></div><div class='line'><span style="color: #ABB2BF">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const workPermitNumber: 17926' >workPermitNumber</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">17926</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.size?: ButtonSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonSize.L = "l"' >L</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.kind?: ButtonKind' >kind</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonKind.SECONDARY = "secondary"' >SECONDARY</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(property) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #E5C07B"><data-lsp lsp='const workPermitSidePage: {&#10;    open: (props: {&#10;        workPermitNumber: number;&#10;    } &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >workPermitSidePage</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) open: (props: {&#10;    workPermitNumber: number;&#10;} &amp; Partial&lt;ModalProps>) => void' >open</data-lsp></span><span style="color: #ABB2BF">({ </span><span style="color: #E06C75"><data-lsp lsp='(property) workPermitNumber: number' >workPermitNumber</data-lsp></span><span style="color: #ABB2BF"> });</span></div><div class='line'><span style="color: #ABB2BF">            }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">        &gt;</span></div><div class='line'><span style="color: #ABB2BF">            \u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u043D\u0430\u0440\u044F\u0434-\u0434\u043E\u043F\u0443\u0441\u043A \u2116</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const workPermitNumber: 17926' >workPermitNumber</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{createModal:r,ModalTitle:i,ModalDescription:d,ModalButtons:c}=C,{Button:n,ButtonKind:p,ButtonSize:t}=D,y=r({kind:"dialog",maxWidth:640,component:({workPermitNumber:e,onConfirmDelete:B,onDismiss:F})=>l(A,{children:[l(i,{children:["\u0412\u044B \u0443\u0432\u0435\u0440\u0435\u043D\u044B, \u0447\u0442\u043E \u0445\u043E\u0442\u0438\u0442\u0435 \u0443\u0434\u0430\u043B\u0438\u0442\u044C \u043D\u0430\u0440\u044F\u0434-\u0434\u043E\u043F\u0443\u0441\u043A \u2116",e,"?"]}),s(d,{children:"\u0418\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044E \u0431\u0443\u0434\u0435\u0442 \u043D\u0435\u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E \u0432\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C!"}),l(c,{children:[s(n,{size:t.L,kind:p.DANGER,onClick:B,children:"\u0423\u0434\u0430\u043B\u0438\u0442\u044C"}),s(n,{size:t.L,kind:p.PLAIN,onClick:F,children:"\u041E\u0442\u043C\u0435\u043D\u0430"})]})]})}),m=r({kind:"side-page",component:({workPermitNumber:e,onDismiss:B})=>l(A,{children:[l(i,{children:["\u041D\u0430\u0440\u044F\u0434-\u0434\u043E\u043F\u0443\u0441\u043A \u2116",e]}),s(d,{children:"\u0422\u0443\u0442 \u0432\u0441\u044F\u043A\u0430\u044F \u0440\u0430\u0437\u043D\u0430\u044F \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F"}),l(c,{children:[s(n,{size:t.L,kind:p.DANGER,onClick:()=>{y.open({workPermitNumber:e,onConfirmDelete(){y.dismiss(),B()}})},children:"\u0423\u0434\u0430\u043B\u0438\u0442\u044C"}),s(n,{size:t.L,kind:p.PLAIN,onClick:B,children:"\u041E\u0442\u043C\u0435\u043D\u0430"})]})]})});return()=>l(n,{size:t.L,kind:p.SECONDARY,onClick:()=>{m.open({workPermitNumber:17926})},children:["\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u043D\u0430\u0440\u044F\u0434-\u0434\u043E\u043F\u0443\u0441\u043A \u2116",17926]})}})]})}}function f(u,v){throw new Error("Expected "+(v?"component":"object")+" `"+u+"` to be defined: you likely forgot to import, pass, or provide it.")}export{T as default};
