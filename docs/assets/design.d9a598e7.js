import{_ as A}from"./index.faefc1d5.js";import{_ as F}from"./index.cf0b2c5f.js";import{a as s,r as u,j as e,F as v}from"./index.e9b62373.js";import{_ as C}from"./index.3fbdf420.js";import"./Popover.module.8de3937d.js";function b(a={}){const{wrapper:l}=a.components||{};return l?s(l,{...a,children:s(t,{})}):t();function t(){const{CodePreview:o}=a.components||{};return o||D("CodePreview",!0),s(o,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) function Toggle({ checked, onChange, align, disabled, children, ...rest }: ToggleProps): JSX.Element&#10;import Toggle' >Toggle</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/selections&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) function Text({ size, weight, tag, className, children, ...rest }: TextProps): JSX.Element&#10;import Text' >Text</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) function HintMessage(props: HintMessageProps): JSX.Element | null&#10;import HintMessage' >HintMessage</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/typography&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> [</span><span style="color: #E5C07B"><data-lsp lsp='const firstOn: boolean' >firstOn</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B"><data-lsp lsp='const setFirstOn: React.Dispatch&lt;React.SetStateAction&lt;boolean>>' >setFirstOn</data-lsp></span><span style="color: #ABB2BF">] </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='function React.useState&lt;boolean>(initialState: boolean | (() => boolean)): [boolean, React.Dispatch&lt;React.SetStateAction&lt;boolean>>] (+1 overload)' >useState</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> [</span><span style="color: #E5C07B"><data-lsp lsp='const secondOn: boolean' >secondOn</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B"><data-lsp lsp='const setSecondOn: React.Dispatch&lt;React.SetStateAction&lt;boolean>>' >setSecondOn</data-lsp></span><span style="color: #ABB2BF">] </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='function React.useState&lt;boolean>(initialState: boolean | (() => boolean)): [boolean, React.Dispatch&lt;React.SetStateAction&lt;boolean>>] (+1 overload)' >useState</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Toggle({ checked, onChange, align, disabled, children, ...rest }: ToggleProps): JSX.Element&#10;import Toggle' >Toggle</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(property) ToggleProps.checked: boolean' >checked</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const firstOn: boolean' >firstOn</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(property) ToggleProps.onChange: React.ChangeEventHandler&lt;HTMLInputElement>' >onChange</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75"><data-lsp lsp='(parameter) evt: React.ChangeEvent&lt;HTMLInputElement>' >evt</data-lsp></span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #61AFEF"><data-lsp lsp='const setFirstOn: (value: React.SetStateAction&lt;boolean>) => void' >setFirstOn</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B"><data-lsp lsp='(parameter) evt: React.ChangeEvent&lt;HTMLInputElement>' >evt</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B"><data-lsp lsp='(property) React.ChangeEvent&lt;HTMLInputElement>.target: EventTarget &amp; HTMLInputElement' >target</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(property) HTMLInputElement.checked: boolean' >checked</data-lsp></span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">                }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            &gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Text({ size, weight, tag, className, children, ...rest }: TextProps): JSX.Element&#10;import Text' >Text</data-lsp></span><span style="color: #ABB2BF">&gt;\u0426\u0432\u0435\u0442\u043D\u043E\u0439 \u043F\u0440\u0438\u043D\u0442\u0435\u0440&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Text({ size, weight, tag, className, children, ...rest }: TextProps): JSX.Element&#10;import Text' >Text</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function HintMessage(props: HintMessageProps): JSX.Element | null&#10;import HintMessage' >HintMessage</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const firstOn: boolean' >firstOn</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #C678DD">?</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;\u041B\u0435\u0433\u0435\u043D\u0434\u0430 \u0438 \u0444\u0438\u0433\u0443\u0440\u044B \u043D\u0430 \u0441\u0445\u0435\u043C\u0435 \u0431\u0443\u0434\u0443\u0442 \u043A\u0430\u043A \u043D\u0430 \u044D\u043A\u0440\u0430\u043D\u0435&apos;</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #C678DD">:</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;\u041B\u0435\u0433\u0435\u043D\u0434\u0430 \u0438 \u0444\u0438\u0433\u0443\u0440\u044B \u043D\u0430 \u0441\u0445\u0435\u043C\u0435 \u0431\u0443\u0434\u0443\u0442 \u0447\u0451\u0440\u043D\u043E-\u0431\u0435\u043B\u044B\u043C\u0438&apos;</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function HintMessage(props: HintMessageProps): JSX.Element | null&#10;import HintMessage' >HintMessage</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Toggle({ checked, onChange, align, disabled, children, ...rest }: ToggleProps): JSX.Element&#10;import Toggle' >Toggle</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Gap: React.NamedExoticComponent&lt;GapProps>&#10;import Gap' >Gap</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) GapProps.size: number' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #D19A66">12</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Toggle({ checked, onChange, align, disabled, children, ...rest }: ToggleProps): JSX.Element&#10;import Toggle' >Toggle</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(property) ToggleProps.checked: boolean' >checked</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const secondOn: boolean' >secondOn</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(property) ToggleProps.onChange: React.ChangeEventHandler&lt;HTMLInputElement>' >onChange</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75"><data-lsp lsp='(parameter) evt: React.ChangeEvent&lt;HTMLInputElement>' >evt</data-lsp></span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #61AFEF"><data-lsp lsp='const setSecondOn: (value: React.SetStateAction&lt;boolean>) => void' >setSecondOn</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B"><data-lsp lsp='(parameter) evt: React.ChangeEvent&lt;HTMLInputElement>' >evt</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B"><data-lsp lsp='(property) React.ChangeEvent&lt;HTMLInputElement>.target: EventTarget &amp; HTMLInputElement' >target</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(property) HTMLInputElement.checked: boolean' >checked</data-lsp></span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">                }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            &gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Text({ size, weight, tag, className, children, ...rest }: TextProps): JSX.Element&#10;import Text' >Text</data-lsp></span><span style="color: #ABB2BF">&gt;\u041A\u043E\u043B\u043E\u043D\u0442\u0438\u0442\u0443\u043B \u0443\u0436\u0435 \u043D\u0430 \u0441\u0445\u0435\u043C\u0435&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Text({ size, weight, tag, className, children, ...rest }: TextProps): JSX.Element&#10;import Text' >Text</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function HintMessage(props: HintMessageProps): JSX.Element | null&#10;import HintMessage' >HintMessage</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const secondOn: boolean' >secondOn</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #C678DD">?</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;\u0420\u0430\u0441\u043F\u0435\u0447\u0430\u0442\u0430\u0435\u0442\u0441\u044F \u0442\u043E\u043B\u044C\u043A\u043E \u043A\u043E\u043B\u043E\u043D\u0442\u0438\u0442\u0443\u043B \u0438\u0437 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043D\u043D\u043E\u0439 \u0441\u0445\u0435\u043C\u044B&apos;</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #C678DD">:</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;\u0420\u0430\u0441\u043F\u0435\u0447\u0430\u0442\u0430\u0435\u0442\u0441\u044F \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u044B\u0439 \u043A\u043E\u043B\u043E\u043D\u0442\u0438\u0442\u0443\u043B&apos;</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function HintMessage(props: HintMessageProps): JSX.Element | null&#10;import HintMessage' >HintMessage</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Toggle({ checked, onChange, align, disabled, children, ...rest }: ToggleProps): JSX.Element&#10;import Toggle' >Toggle</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{Gap:d}=F,{Toggle:p}=C,{Text:c,HintMessage:r}=A;return()=>{const[B,y]=u.exports.useState(!1),[i,g]=u.exports.useState(!1);return e(v,{children:[e(p,{checked:B,onChange:n=>{y(n.target.checked)},children:[s(c,{children:"\u0426\u0432\u0435\u0442\u043D\u043E\u0439 \u043F\u0440\u0438\u043D\u0442\u0435\u0440"}),s(r,{children:B?"\u041B\u0435\u0433\u0435\u043D\u0434\u0430 \u0438 \u0444\u0438\u0433\u0443\u0440\u044B \u043D\u0430 \u0441\u0445\u0435\u043C\u0435 \u0431\u0443\u0434\u0443\u0442 \u043A\u0430\u043A \u043D\u0430 \u044D\u043A\u0440\u0430\u043D\u0435":"\u041B\u0435\u0433\u0435\u043D\u0434\u0430 \u0438 \u0444\u0438\u0433\u0443\u0440\u044B \u043D\u0430 \u0441\u0445\u0435\u043C\u0435 \u0431\u0443\u0434\u0443\u0442 \u0447\u0451\u0440\u043D\u043E-\u0431\u0435\u043B\u044B\u043C\u0438"})]}),s(d,{size:12}),e(p,{checked:i,onChange:n=>{g(n.target.checked)},children:[s(c,{children:"\u041A\u043E\u043B\u043E\u043D\u0442\u0438\u0442\u0443\u043B \u0443\u0436\u0435 \u043D\u0430 \u0441\u0445\u0435\u043C\u0435"}),s(r,{children:i?"\u0420\u0430\u0441\u043F\u0435\u0447\u0430\u0442\u0430\u0435\u0442\u0441\u044F \u0442\u043E\u043B\u044C\u043A\u043E \u043A\u043E\u043B\u043E\u043D\u0442\u0438\u0442\u0443\u043B \u0438\u0437 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043D\u043D\u043E\u0439 \u0441\u0445\u0435\u043C\u044B":"\u0420\u0430\u0441\u043F\u0435\u0447\u0430\u0442\u0430\u0435\u0442\u0441\u044F \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u044B\u0439 \u043A\u043E\u043B\u043E\u043D\u0442\u0438\u0442\u0443\u043B"})]})]})}}})}}function D(a,l){throw new Error("Expected "+(l?"component":"object")+" `"+a+"` to be defined: you likely forgot to import, pass, or provide it.")}export{b as default};
