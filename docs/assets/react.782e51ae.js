import{_ as h}from"./index.c3f67bc4.js";import{_ as f}from"./index.c4a1c1ef.js";import{_ as z}from"./index.a193b8e5.js";import{d as s,j as t,k as r,r as m,z as R}from"./vendor.bc6f4b6e.js";import{T}from"./TextInput.b09fbb64.js";var x=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",TextInput:T});function _(B={}){const{wrapper:y}=B.components||{};return y?s(y,{...B,children:s(b,{})}):b();function b(){const o=Object.assign({p:"p",a:"a",h2:"h2",h3:"h3"},B.components),{CodePreview:C}=o;return C||L("CodePreview",!0),t(r,{children:[t(o.p,{children:[`\u0414\u043B\u044F \u043F\u043E\u0434\u0440\u043E\u0431\u043D\u043E\u0439 \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u0438 \u043F\u043E \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0435 \u0438 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044E \u0441\u043C\u043E\u0442\u0440\u0438\u0442\u0435
`,s(o.a,{href:"/dialog",children:"Dialog"}),"."]}),`
`,s(o.h2,{children:"\u041F\u0440\u0438\u043C\u0435\u0440\u044B"}),`
`,s(o.h3,{children:"\u041C\u043D\u043E\u0433\u043E \u043A\u043E\u043D\u0442\u0435\u043D\u0442\u0430"}),`
`,s(C,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) function createModalComponent&lt;Props extends Record&lt;string, any>>(args: CreateModalArgs&lt;Props>): (props: Props &amp; ModalProps) => null&#10;import createModalComponent' >createModalComponent</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) function ModalDescription({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalDescription' >ModalDescription</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) function ModalButtons({ children }: ModalButtonsProps): JSX.Element&#10;import ModalButtons' >ModalButtons</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">} </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/modal&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/button&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Gap: React.NamedExoticComponent&lt;GapProps>&#10;import Gap' >Gap</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/utils&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const ExpandableSidePage: (props: {&#10;    title: string;&#10;    description: string;&#10;} &amp; ModalProps) => null' >ExpandableSidePage</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF"><data-lsp lsp='(alias) createModalComponent&lt;{&#10;    title: string;&#10;    description: string;&#10;}>(args: CreateModalArgs&lt;{&#10;    title: string;&#10;    description: string;&#10;}>): (props: {&#10;    title: string;&#10;    description: string;&#10;} &amp; ModalProps) => null&#10;import createModalComponent' >createModalComponent</data-lsp></span><span style="color: #ABB2BF">&lt;{</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) title: string' >title</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #E5C07B">string</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) description: string' >description</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #E5C07B">string</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #ABB2BF">}&gt;({</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) CreateModalArgs&lt;{ title: string; description: string; }>.kind: ModalKind' >kind</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;side-page&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) CreateModalArgs&lt;{ title: string; description: string; }>.maxWidth?: number' >maxWidth</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">450</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #7F848E">// \u0412\u044B\u0441\u043E\u0442\u0430 \u0441\u0430\u0439\u0434\u043F\u0435\u0439\u0434\u0436\u0430 \u043D\u0435 \u043C\u0435\u043D\u044F\u0435\u0442\u0441\u044F</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) CreateModalArgs&lt;{ title: string; description: string; }>.maxHeight?: number' >maxHeight</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">300</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #61AFEF"><data-lsp lsp='(method) CreateModalArgs&lt;{ title: string; description: string; }>.component(this: void, props: {&#10;    title: string;&#10;    description: string;&#10;} &amp; ModalProps): JSX.Element' >component</data-lsp></span><span style="color: #ABB2BF">({ </span><span style="color: #E06C75"><data-lsp lsp='(parameter) title: string' >title</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(parameter) description: string' >description</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(parameter) onDismiss: (this: void) => void' >onDismiss</data-lsp></span><span style="color: #ABB2BF"> }) {</span></div><div class='line'><span style="color: #ABB2BF">        </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> [</span><span style="color: #E5C07B"><data-lsp lsp='const size: number' >size</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B"><data-lsp lsp='const setSize: React.Dispatch&lt;React.SetStateAction&lt;number>>' >setSize</data-lsp></span><span style="color: #ABB2BF">] </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='function React.useState&lt;number>(initialState: number | (() => number)): [number, React.Dispatch&lt;React.SetStateAction&lt;number>>] (+1 overload)' >useState</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">            &lt;&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(parameter) title: string' >title</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalDescription({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalDescription' >ModalDescription</data-lsp></span><span style="color: #ABB2BF">&gt;</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(parameter) description: string' >description</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalDescription({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalDescription' >ModalDescription</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Gap: React.NamedExoticComponent&lt;GapProps>&#10;import Gap' >Gap</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) GapProps.size: number' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #D19A66">36</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">[...</span><span style="color: #E5C07B"><data-lsp lsp='var Array: ArrayConstructor&#10;(arrayLength?: number | undefined) => any[] (+2 overloads)' >Array</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #E06C75"><data-lsp lsp='const size: number' >size</data-lsp></span><span style="color: #ABB2BF">).</span><span style="color: #61AFEF"><data-lsp lsp='(method) Array&lt;any>.keys(): IterableIterator&lt;number>' >keys</data-lsp></span><span style="color: #ABB2BF">()].</span><span style="color: #61AFEF"><data-lsp lsp='(method) Array&lt;number>.map&lt;JSX.Element>(callbackfn: (value: number, index: number, array: number[]) => JSX.Element, thisArg?: any): JSX.Element[]' >map</data-lsp></span><span style="color: #ABB2BF">(() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const LOREM_IPSUM: JSX.Element' >LOREM_IPSUM</data-lsp></span><span style="color: #ABB2BF">)</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalButtons({ children }: ModalButtonsProps): JSX.Element&#10;import ModalButtons' >ModalButtons</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                    &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) ButtonProps.size?: ButtonSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonSize.L = "l"' >L</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                            </span><span style="color: #61AFEF"><data-lsp lsp='const setSize: (value: React.SetStateAction&lt;number>) => void' >setSize</data-lsp></span><span style="color: #ABB2BF">((</span><span style="color: #E06C75"><data-lsp lsp='(parameter) s: number' >s</data-lsp></span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75"><data-lsp lsp='(parameter) s: number' >s</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">                        }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    &gt;</span></div><div class='line'><span style="color: #ABB2BF">                        \u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C</span></div><div class='line'><span style="color: #ABB2BF">                    &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                    &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) ButtonProps.size?: ButtonSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonSize.L = "l"' >L</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) ButtonProps.kind?: ButtonKind' >kind</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonKind.PLAIN = "plain"' >PLAIN</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(parameter) onDismiss: (this: void) => void' >onDismiss</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    &gt;</span></div><div class='line'><span style="color: #ABB2BF">                        \u041E\u0442\u043C\u0435\u043D\u0430</span></div><div class='line'><span style="color: #ABB2BF">                    &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalButtons({ children }: ModalButtonsProps): JSX.Element&#10;import ModalButtons' >ModalButtons</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/&gt;</span></div><div class='line'><span style="color: #ABB2BF">        );</span></div><div class='line'><span style="color: #ABB2BF">    },</span></div><div class='line'><span style="color: #ABB2BF">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> [</span><span style="color: #E5C07B"><data-lsp lsp='const isOpen: boolean' >isOpen</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B"><data-lsp lsp='const setIsOpen: React.Dispatch&lt;React.SetStateAction&lt;boolean>>' >setIsOpen</data-lsp></span><span style="color: #ABB2BF">] </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='function React.useState&lt;boolean>(initialState: boolean | (() => boolean)): [boolean, React.Dispatch&lt;React.SetStateAction&lt;boolean>>] (+1 overload)' >useState</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) ButtonProps.size?: ButtonSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonSize.L = "l"' >L</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) ButtonProps.kind?: ButtonKind' >kind</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonKind.SECONDARY = "secondary"' >SECONDARY</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #61AFEF"><data-lsp lsp='const setIsOpen: (value: React.SetStateAction&lt;boolean>) => void' >setIsOpen</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">                }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            &gt;</span></div><div class='line'><span style="color: #ABB2BF">                \u041E\u0442\u043A\u0440\u044B\u0442\u044C</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #C678DD">{</span><span style="color: #56B6C2">!</span><span style="color: #E06C75"><data-lsp lsp='const isOpen: boolean' >isOpen</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">?</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">null</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">:</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='const ExpandableSidePage: (props: {&#10;    title: string;&#10;    description: string;&#10;} &amp; ModalProps) => null' >ExpandableSidePage</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(method) ModalProps.onDismiss(this: void): void' >onDismiss</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #61AFEF"><data-lsp lsp='const setIsOpen: (value: React.SetStateAction&lt;boolean>) => void' >setIsOpen</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">                    }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) title: string' >title</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"\u0421\u0430\u0439\u0434\u043F\u0435\u0439\u0434\u0436"</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) description: string' >description</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"\u041F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u0434\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043A\u043E\u043D\u0442\u0435\u043D\u0442\u0430!"</span></div><div class='line'><span style="color: #ABB2BF">                /&gt;</span></div><div class='line'><span style="color: #ABB2BF">            )</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{Text:D}=z,E=s(D,{children:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."}),{createModalComponent:v,ModalTitle:A,ModalDescription:F,ModalButtons:p}=f,{Button:e,ButtonKind:n,ButtonSize:c}=h,{Gap:g}=R,M=v({kind:"side-page",maxWidth:450,maxHeight:300,component({title:d,description:i,onDismiss:l}){const[a,u]=m.exports.useState(0);return t(r,{children:[s(A,{children:d}),s(F,{children:i}),s(g,{size:36}),[...Array(a).keys()].map(()=>E),t(p,{children:[s(e,{size:c.L,onClick:()=>{u(S=>S+1)},children:"\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C"}),s(e,{size:c.L,kind:n.PLAIN,onClick:l,children:"\u041E\u0442\u043C\u0435\u043D\u0430"})]})]})}});return()=>{const[d,i]=m.exports.useState(!1);return t(r,{children:[s(e,{size:c.L,kind:n.SECONDARY,onClick:()=>{i(!0)},children:"\u041E\u0442\u043A\u0440\u044B\u0442\u044C"}),d?s(M,{onDismiss:()=>{i(!1)},title:"\u0421\u0430\u0439\u0434\u043F\u0435\u0439\u0434\u0436",description:"\u041F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u0434\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043A\u043E\u043D\u0442\u0435\u043D\u0442\u0430!"}):null]})}}}),`
`,s(o.h3,{children:"\u0421 \u0444\u043E\u0440\u043C\u043E\u0439"}),`
`,s(o.p,{children:"\u0421\u0430\u0439\u0434\u043F\u0435\u0439\u0434\u0436 \u0441 \u0444\u043E\u0440\u043C\u043E\u0439, \u043F\u0440\u0438 \u0437\u0430\u043A\u0440\u044B\u0442\u0438\u0438 \u043F\u0440\u0435\u0434\u043E\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043B\u0443\u0447\u0430\u0439\u043D\u0443\u044E \u043F\u043E\u0442\u0435\u0440\u044E \u0434\u0430\u043D\u043D\u044B\u0445."}),`
`,s(C,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) function createModal&lt;Props extends Record&lt;string, any>>(args: CreateModalArgs&lt;Props>): {&#10;    open: (props: Props &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}&#10;import createModal' >createModal</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) function createModalComponent&lt;Props extends Record&lt;string, any>>(args: CreateModalArgs&lt;Props>): (props: Props &amp; ModalProps) => null&#10;import createModalComponent' >createModalComponent</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) function ModalDescription({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalDescription' >ModalDescription</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(alias) function ModalButtons({ children }: ModalButtonsProps): JSX.Element&#10;import ModalButtons' >ModalButtons</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">} </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/modal&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/button&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const TextInput: React.ForwardRefExoticComponent&lt;TextInputProps &amp; React.InputHTMLAttributes&lt;HTMLInputElement> &amp; React.RefAttributes&lt;HTMLInputElement>>&#10;import TextInput' >TextInput</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/text-input&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Gap: React.NamedExoticComponent&lt;GapProps>&#10;import Gap' >Gap</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/utils&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const FormSidePage: (props: {&#10;    fieldValue: string;&#10;    onChangeField(value: string): void;&#10;    onSave(): void;&#10;} &amp; ModalProps) => null' >FormSidePage</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF"><data-lsp lsp='(alias) createModalComponent&lt;{&#10;    fieldValue: string;&#10;    onChangeField(value: string): void;&#10;    onSave(): void;&#10;}>(args: CreateModalArgs&lt;{&#10;    fieldValue: string;&#10;    onChangeField(value: string): void;&#10;    onSave(): void;&#10;}>): (props: {&#10;    fieldValue: string;&#10;    onChangeField(value: string): void;&#10;    onSave(): void;&#10;} &amp; ModalProps) => null&#10;import createModalComponent' >createModalComponent</data-lsp></span><span style="color: #ABB2BF">&lt;{</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) fieldValue: string' >fieldValue</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #E5C07B">string</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #61AFEF"><data-lsp lsp='(method) onChangeField(value: string): void' >onChangeField</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #E06C75"><data-lsp lsp='(parameter) value: string' >value</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #E5C07B">string</span><span style="color: #ABB2BF">): </span><span style="color: #E5C07B">void</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #61AFEF"><data-lsp lsp='(method) onSave(): void' >onSave</data-lsp></span><span style="color: #ABB2BF">(): </span><span style="color: #E5C07B">void</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #ABB2BF">}&gt;({</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) CreateModalArgs&lt;{ fieldValue: string; onChangeField(value: string): void; onSave(): void; }>.kind: ModalKind' >kind</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;side-page&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #61AFEF"><data-lsp lsp='(method) CreateModalArgs&lt;{ fieldValue: string; onChangeField(value: string): void; onSave(): void; }>.component(this: void, props: {&#10;    fieldValue: string;&#10;    onChangeField(value: string): void;&#10;    onSave(): void;&#10;} &amp; ModalProps): JSX.Element' >component</data-lsp></span><span style="color: #ABB2BF">({ </span><span style="color: #E06C75"><data-lsp lsp='(parameter) fieldValue: string' >fieldValue</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(parameter) onChangeField: (value: string) => void' >onChangeField</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(parameter) onSave: () => void' >onSave</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(parameter) onDismiss: (this: void) => void' >onDismiss</data-lsp></span><span style="color: #ABB2BF"> }) {</span></div><div class='line'><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">            &lt;&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">&gt;\u0424\u043E\u0440\u043C\u0430&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalDescription({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalDescription' >ModalDescription</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                    \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0442\u043E-\u043D\u0438\u0431\u0443\u0434\u044C \u0432 \u043F\u043E\u043B\u0435 \u0438 \u043F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u0437\u0430\u043A\u0440\u044B\u0442\u044C \u0431\u0435\u0437</span></div><div class='line'><span style="color: #ABB2BF">                    \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0438\u044F</span></div><div class='line'><span style="color: #ABB2BF">                &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalDescription({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalDescription' >ModalDescription</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Gap: React.NamedExoticComponent&lt;GapProps>&#10;import Gap' >Gap</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) GapProps.size: number' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #D19A66">16</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const TextInput: React.ForwardRefExoticComponent&lt;TextInputProps &amp; React.InputHTMLAttributes&lt;HTMLInputElement> &amp; React.RefAttributes&lt;HTMLInputElement>>&#10;import TextInput' >TextInput</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) TextInputProps.label?: string' >label</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #98C379">"\u041F\u043E\u043B\u0435 \u0434\u043B\u044F \u0432\u0432\u043E\u0434\u0430 \u0442\u0435\u043A\u0441\u0442\u0430"</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(property) value?: string &amp; (string | number | readonly string[])' >value</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(parameter) fieldValue: string' >fieldValue</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) React.InputHTMLAttributes&lt;HTMLInputElement>.onChange?: React.ChangeEventHandler&lt;HTMLInputElement> | undefined' >onChange</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75"><data-lsp lsp='(parameter) evt: React.ChangeEvent&lt;HTMLInputElement>' >evt</data-lsp></span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #61AFEF"><data-lsp lsp='(parameter) onChangeField: (value: string) => void' >onChangeField</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B"><data-lsp lsp='(parameter) evt: React.ChangeEvent&lt;HTMLInputElement>' >evt</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B"><data-lsp lsp='(property) React.ChangeEvent&lt;HTMLInputElement>.target: EventTarget &amp; HTMLInputElement' >target</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(property) HTMLInputElement.value: string' >value</data-lsp></span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">                    }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                /&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalButtons({ children }: ModalButtonsProps): JSX.Element&#10;import ModalButtons' >ModalButtons</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                    &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) ButtonProps.size?: ButtonSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonSize.L = "l"' >L</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(parameter) onSave: () => void' >onSave</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                        \u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C</span></div><div class='line'><span style="color: #ABB2BF">                    &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                    &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) ButtonProps.size?: ButtonSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonSize.L = "l"' >L</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) ButtonProps.kind?: ButtonKind' >kind</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonKind.PLAIN = "plain"' >PLAIN</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(parameter) onDismiss: (this: void) => void' >onDismiss</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    &gt;</span></div><div class='line'><span style="color: #ABB2BF">                        \u041E\u0442\u043C\u0435\u043D\u0430</span></div><div class='line'><span style="color: #ABB2BF">                    &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalButtons({ children }: ModalButtonsProps): JSX.Element&#10;import ModalButtons' >ModalButtons</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/&gt;</span></div><div class='line'><span style="color: #ABB2BF">        );</span></div><div class='line'><span style="color: #ABB2BF">    },</span></div><div class='line'><span style="color: #ABB2BF">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const confirmationDialog: {&#10;    open: (props: {&#10;        closeWithoutSaving(): void;&#10;    } &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >confirmationDialog</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF"><data-lsp lsp='(alias) createModal&lt;{&#10;    closeWithoutSaving(): void;&#10;}>(args: CreateModalArgs&lt;{&#10;    closeWithoutSaving(): void;&#10;}>): {&#10;    open: (props: {&#10;        closeWithoutSaving(): void;&#10;    } &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}&#10;import createModal' >createModal</data-lsp></span><span style="color: #ABB2BF">&lt;{ </span><span style="color: #61AFEF"><data-lsp lsp='(method) closeWithoutSaving(): void' >closeWithoutSaving</data-lsp></span><span style="color: #ABB2BF">(): </span><span style="color: #E5C07B">void</span><span style="color: #ABB2BF"> }&gt;({</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) CreateModalArgs&lt;Props extends Record&lt;string, any>>.kind: ModalKind' >kind</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;dialog&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E06C75"><data-lsp lsp='(property) CreateModalArgs&lt;{ closeWithoutSaving(): void; }>.maxWidth?: number' >maxWidth</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">520</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #61AFEF"><data-lsp lsp='(method) CreateModalArgs&lt;{ closeWithoutSaving(): void; }>.component(this: void, props: {&#10;    closeWithoutSaving(): void;&#10;} &amp; ModalProps): JSX.Element' >component</data-lsp></span><span style="color: #ABB2BF">: ({ </span><span style="color: #E06C75"><data-lsp lsp='(parameter) closeWithoutSaving: () => void' >closeWithoutSaving</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(parameter) onDismiss: (this: void) => void' >onDismiss</data-lsp></span><span style="color: #ABB2BF"> }) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">&gt;\u0412\u044B \u0443\u0432\u0435\u0440\u0435\u043D\u044B, \u0447\u0442\u043E \u0445\u043E\u0442\u0438\u0442\u0435 \u0437\u0430\u043A\u0440\u044B\u0442\u044C \u0444\u043E\u0440\u043C\u0443?&lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalTitle({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalTitle' >ModalTitle</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalDescription({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalDescription' >ModalDescription</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                \u0412 \u044D\u0442\u043E\u043C \u0441\u043B\u0443\u0447\u0430\u0435 \u0432\u0441\u0435 \u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u043D\u044B\u0435 \u0434\u0430\u043D\u043D\u044B\u0435 \u0431\u0443\u0434\u0443\u0442 \u043F\u043E\u0442\u0435\u0440\u044F\u043D\u044B.</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalDescription({ children }: ModalDescriptionProps): JSX.Element&#10;import ModalDescription' >ModalDescription</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalButtons({ children }: ModalButtonsProps): JSX.Element&#10;import ModalButtons' >ModalButtons</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) ButtonProps.size?: ButtonSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonSize.L = "l"' >L</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #61AFEF"><data-lsp lsp='(parameter) onDismiss: (this: void) => void' >onDismiss</data-lsp></span><span style="color: #ABB2BF">();</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #61AFEF"><data-lsp lsp='(parameter) closeWithoutSaving: () => void' >closeWithoutSaving</data-lsp></span><span style="color: #ABB2BF">();</span></div><div class='line'><span style="color: #ABB2BF">                    }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                &gt;</span></div><div class='line'><span style="color: #ABB2BF">                    \u0417\u0430\u043A\u0440\u044B\u0442\u044C</span></div><div class='line'><span style="color: #ABB2BF">                &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) ButtonProps.size?: ButtonSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonSize.L = "l"' >L</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) ButtonProps.kind?: ButtonKind' >kind</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonKind.PLAIN = "plain"' >PLAIN</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(parameter) onDismiss: (this: void) => void' >onDismiss</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                &gt;</span></div><div class='line'><span style="color: #ABB2BF">                    \u041E\u0442\u043C\u0435\u043D\u0430</span></div><div class='line'><span style="color: #ABB2BF">                &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function ModalButtons({ children }: ModalButtonsProps): JSX.Element&#10;import ModalButtons' >ModalButtons</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/&gt;</span></div><div class='line'><span style="color: #ABB2BF">    ),</span></div><div class='line'><span style="color: #ABB2BF">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">function</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF"><data-lsp lsp='function FormSidePageWrapper({ onDismiss }: {&#10;    onDismiss(): void;&#10;}): JSX.Element' >FormSidePageWrapper</data-lsp></span><span style="color: #ABB2BF">({ </span><span style="color: #E06C75"><data-lsp lsp='(parameter) onDismiss: () => void' >onDismiss</data-lsp></span><span style="color: #ABB2BF"> }: { </span><span style="color: #61AFEF"><data-lsp lsp='(method) onDismiss(): void' >onDismiss</data-lsp></span><span style="color: #ABB2BF">(): </span><span style="color: #E5C07B">void</span><span style="color: #ABB2BF"> }) {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> [</span><span style="color: #E5C07B"><data-lsp lsp='const fieldValue: string' >fieldValue</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B"><data-lsp lsp='const setFieldValue: React.Dispatch&lt;React.SetStateAction&lt;string>>' >setFieldValue</data-lsp></span><span style="color: #ABB2BF">] </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='function React.useState&lt;string>(initialState: string | (() => string)): [string, React.Dispatch&lt;React.SetStateAction&lt;string>>] (+1 overload)' >useState</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&apos;&apos;</span><span style="color: #ABB2BF">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;</span><span style="color: #E5C07B"><data-lsp lsp='const FormSidePage: (props: {&#10;    fieldValue: string;&#10;    onChangeField(value: string): void;&#10;    onSave(): void;&#10;} &amp; ModalProps) => null' >FormSidePage</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) fieldValue: string' >fieldValue</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const fieldValue: string' >fieldValue</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(method) onChangeField(value: string): void' >onChangeField</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const setFieldValue: React.Dispatch&lt;React.SetStateAction&lt;string>>' >setFieldValue</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(method) ModalProps.onDismiss(this: void): void' >onDismiss</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #E06C75"><data-lsp lsp='const fieldValue: string' >fieldValue</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">===</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;&apos;</span><span style="color: #ABB2BF">) {</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #61AFEF"><data-lsp lsp='(parameter) onDismiss: () => void' >onDismiss</data-lsp></span><span style="color: #ABB2BF">();</span></div><div class='line'><span style="color: #ABB2BF">                } </span><span style="color: #C678DD">else</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #E5C07B"><data-lsp lsp='const confirmationDialog: {&#10;    open: (props: {&#10;        closeWithoutSaving(): void;&#10;    } &amp; Partial&lt;ModalProps>) => void;&#10;    dismiss: () => void;&#10;}' >confirmationDialog</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(property) open: (props: {&#10;    closeWithoutSaving(): void;&#10;} &amp; Partial&lt;ModalProps>) => void' >open</data-lsp></span><span style="color: #ABB2BF">({</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #E06C75"><data-lsp lsp='(method) closeWithoutSaving(): void' >closeWithoutSaving</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #E06C75"><data-lsp lsp='(parameter) onDismiss: () => void' >onDismiss</data-lsp></span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">                    });</span></div><div class='line'><span style="color: #ABB2BF">                }</span></div><div class='line'><span style="color: #ABB2BF">            }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #D19A66"><data-lsp lsp='(method) onSave(): void' >onSave</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(parameter) onDismiss: () => void' >onDismiss</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">        /&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> [</span><span style="color: #E5C07B"><data-lsp lsp='const isOpen: boolean' >isOpen</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B"><data-lsp lsp='const setIsOpen: React.Dispatch&lt;React.SetStateAction&lt;boolean>>' >setIsOpen</data-lsp></span><span style="color: #ABB2BF">] </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='function React.useState&lt;boolean>(initialState: boolean | (() => boolean)): [boolean, React.Dispatch&lt;React.SetStateAction&lt;boolean>>] (+1 overload)' >useState</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) ButtonProps.size?: ButtonSize' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonSize&#10;import ButtonSize' >ButtonSize</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonSize.L = "l"' >L</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) ButtonProps.kind?: ButtonKind' >kind</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='(alias) enum ButtonKind&#10;import ButtonKind' >ButtonKind</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(enum member) ButtonKind.SECONDARY = "secondary"' >SECONDARY</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(JSX attribute) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #61AFEF"><data-lsp lsp='const setIsOpen: (value: React.SetStateAction&lt;boolean>) => void' >setIsOpen</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">                }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            &gt;</span></div><div class='line'><span style="color: #ABB2BF">                \u041E\u0442\u043A\u0440\u044B\u0442\u044C</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            </span><span style="color: #C678DD">{</span><span style="color: #56B6C2">!</span><span style="color: #E06C75"><data-lsp lsp='const isOpen: boolean' >isOpen</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">?</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">null</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">:</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='function FormSidePageWrapper({ onDismiss }: {&#10;    onDismiss(): void;&#10;}): JSX.Element' >FormSidePageWrapper</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(method) onDismiss(): void' >onDismiss</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #61AFEF"><data-lsp lsp='const setIsOpen: (value: React.SetStateAction&lt;boolean>) => void' >setIsOpen</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">                    }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                /&gt;</span></div><div class='line'><span style="color: #ABB2BF">            )</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{createModal:D,createModalComponent:E,ModalTitle:v,ModalDescription:A,ModalButtons:F}=f,{Button:p,ButtonKind:e,ButtonSize:n}=h,{TextInput:c}=x,{Gap:g}=R,M=E({kind:"side-page",component({fieldValue:l,onChangeField:a,onSave:u,onDismiss:S}){return t(r,{children:[s(v,{children:"\u0424\u043E\u0440\u043C\u0430"}),s(A,{children:"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0442\u043E-\u043D\u0438\u0431\u0443\u0434\u044C \u0432 \u043F\u043E\u043B\u0435 \u0438 \u043F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u0437\u0430\u043A\u0440\u044B\u0442\u044C \u0431\u0435\u0437 \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0438\u044F"}),s(g,{size:16}),s(c,{label:"\u041F\u043E\u043B\u0435 \u0434\u043B\u044F \u0432\u0432\u043E\u0434\u0430 \u0442\u0435\u043A\u0441\u0442\u0430",value:l,onChange:P=>{a(P.target.value)}}),t(F,{children:[s(p,{size:n.L,onClick:u,children:"\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C"}),s(p,{size:n.L,kind:e.PLAIN,onClick:S,children:"\u041E\u0442\u043C\u0435\u043D\u0430"})]})]})}}),d=D({kind:"dialog",maxWidth:520,component:({closeWithoutSaving:l,onDismiss:a})=>t(r,{children:[s(v,{children:"\u0412\u044B \u0443\u0432\u0435\u0440\u0435\u043D\u044B, \u0447\u0442\u043E \u0445\u043E\u0442\u0438\u0442\u0435 \u0437\u0430\u043A\u0440\u044B\u0442\u044C \u0444\u043E\u0440\u043C\u0443?"}),s(A,{children:"\u0412 \u044D\u0442\u043E\u043C \u0441\u043B\u0443\u0447\u0430\u0435 \u0432\u0441\u0435 \u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u043D\u044B\u0435 \u0434\u0430\u043D\u043D\u044B\u0435 \u0431\u0443\u0434\u0443\u0442 \u043F\u043E\u0442\u0435\u0440\u044F\u043D\u044B."}),t(F,{children:[s(p,{size:n.L,onClick:()=>{a(),l()},children:"\u0417\u0430\u043A\u0440\u044B\u0442\u044C"}),s(p,{size:n.L,kind:e.PLAIN,onClick:a,children:"\u041E\u0442\u043C\u0435\u043D\u0430"})]})]})});function i({onDismiss:l}){const[a,u]=m.exports.useState("");return s(M,{fieldValue:a,onChangeField:u,onDismiss:()=>{a===""?l():d.open({closeWithoutSaving:l})},onSave:l})}return()=>{const[l,a]=m.exports.useState(!1);return t(r,{children:[s(p,{size:n.L,kind:e.SECONDARY,onClick:()=>{a(!0)},children:"\u041E\u0442\u043A\u0440\u044B\u0442\u044C"}),l?s(i,{onDismiss:()=>{a(!1)}}):null]})}}})]})}}function L(B,y){throw new Error("Expected "+(y?"component":"object")+" `"+B+"` to be defined: you likely forgot to import, pass, or provide it.")}export{_ as default};
