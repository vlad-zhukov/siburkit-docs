import{a as s,j as t,F as v,r as d}from"./index.720bafa5.js";import{_ as D}from"./index.80baa9cb.js";import{_ as g}from"./index.da20fdba.js";import{_ as b}from"./index.415154c9.js";import"./Popover.module.47ab085d.js";import{n as E,v as h,_ as F}from"./package.73272703.js";import{P as f}from"./PackageInfo.701250f5.js";import"./Columns.bcb6762e.js";function _(n={}){const{wrapper:p}=n.components||{};return p?s(p,{...n,children:s(y,{})}):y();function y(){const l=Object.assign({p:"p",code:"code",blockquote:"blockquote",h2:"h2",div:"div"},n.components),{CodePreview:r}=l;return r||R("CodePreview",!0),t(v,{children:[s(f,{name:E,version:h}),`
`,t(l.p,{children:[s(l.code,{children:"Scroller"}),` (\u0441\u043A\u0440\u043E\u043B\u043B\u0435\u0440) \u2014 \u044D\u0442\u043E \u043D\u0438\u0437\u043A\u043E\u0443\u0440\u043E\u0432\u043D\u0435\u0432\u044B\u0439 \u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442, \u043A\u043E\u0442\u043E\u0440\u044B\u0439 \u043F\u043E\u0437\u0432\u043E\u043B\u044F\u0435\u0442 \u0441\u0434\u0435\u043B\u0430\u0442\u044C
\u0431\u043B\u043E\u043A \u0441 \u043A\u0430\u0441\u0442\u043E\u043C\u043D\u044B\u043C\u0438 \u0441\u043A\u0440\u043E\u043B\u043B\u0431\u0430\u0440\u0430\u043C\u0438. \u0418\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u0442\u0441\u044F \u0432 \u0432\u044B\u043F\u0430\u0434\u0430\u044E\u0449\u0438\u0445 \u0441\u043F\u0438\u0441\u043A\u0430\u0445 \u0438 \u043C\u043E\u0434\u0430\u043B\u044C\u043D\u044B\u0445
\u043E\u043A\u043D\u0430\u0445.`]}),`
`,t(l.blockquote,{children:[`
`,s(l.p,{children:"\u041D\u0430 \u0434\u0430\u043D\u043D\u044B\u0439 \u043C\u043E\u043C\u0435\u043D\u0442 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044E\u0442\u0441\u044F \u0442\u043E\u043B\u044C\u043A\u043E \u0432\u0435\u0440\u0442\u0438\u043A\u0430\u043B\u044C\u043D\u044B\u0435 \u0441\u043A\u0440\u043E\u043B\u043B\u0431\u0430\u0440\u044B."}),`
`]}),`
`,s(l.h2,{children:"\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435"}),`
`,s(r,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) function Scroller({ contentRef, className, children, ...rest }: ScrollerProps): JSX.Element&#10;import Scroller' >Scroller</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/menu&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const blockColors: string[]' >blockColors</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> [</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;lavenderblush&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;ghostwhite&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;aliceblue&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;azure&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;honeydew&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;beige&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;oldlace&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;seashell&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;linen&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;mistyrose&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const ref: React.MutableRefObject&lt;null>' >ref</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='function React.useRef&lt;null>(initialValue: null): React.MutableRefObject&lt;null> (+2 overloads)' >useRef</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">null</span><span style="color: #ABB2BF">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;</span><span style="color: #E06C75"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.style?: React.CSSProperties | undefined' >style</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">{ </span><span style="color: #E06C75"><data-lsp lsp='(property) StandardLonghandProperties&lt;string | number, string &amp; {}>.width?: Property.Width&lt;string | number> | undefined' >width</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">220</span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(property) StandardLonghandProperties&lt;string | number, string &amp; {}>.height?: Property.Height&lt;string | number> | undefined' >height</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">280</span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(property) StandardShorthandProperties&lt;string | number, string &amp; {}>.border?: Property.Border&lt;string | number> | undefined' >border</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;1px solid #000&apos;</span><span style="color: #ABB2BF"> }</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Scroller({ contentRef, className, children, ...rest }: ScrollerProps): JSX.Element&#10;import Scroller' >Scroller</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) ScrollerProps.contentRef: React.RefObject&lt;HTMLDivElement>' >contentRef</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const ref: React.MutableRefObject&lt;null>' >ref</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='const blockColors: string[]' >blockColors</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(method) Array&lt;string>.map&lt;JSX.Element>(callbackfn: (value: string, index: number, array: string[]) => JSX.Element, thisArg?: any): JSX.Element[]' >map</data-lsp></span><span style="color: #ABB2BF">((</span><span style="color: #E06C75"><data-lsp lsp='(parameter) color: string' >color</data-lsp></span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">                    &lt;</span><span style="color: #E06C75"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #D19A66"><data-lsp lsp='(property) React.Attributes.key?: React.Key | null | undefined' >key</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(parameter) color: string' >color</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #D19A66"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.style?: React.CSSProperties | undefined' >style</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">{ </span><span style="color: #E06C75"><data-lsp lsp='(property) StandardShorthandProperties&lt;string | number, string &amp; {}>.background?: Property.Background&lt;string | number> | undefined' >background</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #E06C75"><data-lsp lsp='(parameter) color: string' >color</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(property) StandardLonghandProperties&lt;string | number, string &amp; {}>.height?: Property.Height&lt;string | number> | undefined' >height</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">65</span><span style="color: #ABB2BF"> }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    /&gt;</span></div><div class='line'><span style="color: #ABB2BF">                ))</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Scroller({ contentRef, className, children, ...rest }: ScrollerProps): JSX.Element&#10;import Scroller' >Scroller</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/</span><span style="color: #E06C75"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{Scroller:c}=F,o=["lavenderblush","ghostwhite","aliceblue","azure","honeydew","beige","oldlace","seashell","linen","mistyrose"];return()=>{const B=d.exports.useRef(null);return s(l.div,{style:{width:220,height:280,border:"1px solid #000"},children:s(c,{contentRef:B,children:o.map(e=>s(l.div,{style:{background:e,height:65}},e))})})}}}),`
`,s(l.p,{children:`\u0412\u044B\u0441\u043E\u0442\u0430 \u0441\u043A\u0440\u043E\u043B\u043B\u0431\u0430\u0440\u043E\u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043E\u0442 \u0432\u044B\u0441\u043E\u0442\u044B \u043A\u043E\u043D\u0442\u0435\u043D\u0442\u0430. \u0415\u0441\u043B\u0438 \u0432\u044B\u0441\u043E\u0442\u0430 \u043A\u043E\u043D\u0442\u0435\u043D\u0442\u0430 \u043C\u0435\u043D\u044C\u0448\u0435
\u0432\u044B\u0441\u043E\u0442\u044B \u0431\u043B\u043E\u043A\u0430, \u0442\u043E \u0441\u043A\u0440\u043E\u043B\u043B\u0431\u0430\u0440\u044B \u0431\u0443\u0434\u0443\u0442 \u0441\u043F\u0440\u044F\u0442\u0430\u043D\u044B.`}),`
`,s(r,{code:`<pre class="shiki one-dark-pro twoslash lsp" style="background-color: #282c34; color: #abb2bf" preview="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) function Scroller({ contentRef, className, children, ...rest }: ScrollerProps): JSX.Element&#10;import Scroller' >Scroller</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/menu&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/button&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const PlusIcon: Icon&#10;import PlusIcon' >PlusIcon</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(alias) const MinusIcon: Icon&#10;import MinusIcon' >MinusIcon</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/icons&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75"><data-lsp lsp='(alias) const Gap: React.NamedExoticComponent&lt;GapProps>&#10;import Gap' >Gap</data-lsp></span><span style="color: #ABB2BF"> } </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&apos;@siburkit/utils&apos;</span><span style="color: #ABB2BF">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const blockColors: string[]' >blockColors</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> [</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;lavenderblush&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;ghostwhite&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;aliceblue&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;azure&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;honeydew&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;beige&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;oldlace&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;seashell&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;linen&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #98C379">&apos;mistyrose&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C678DD">export</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">default</span><span style="color: #ABB2BF"> () </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const ref: React.MutableRefObject&lt;null>' >ref</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='function React.useRef&lt;null>(initialValue: null): React.MutableRefObject&lt;null> (+2 overloads)' >useRef</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">null</span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> [</span><span style="color: #E5C07B"><data-lsp lsp='const blocks: string[]' >blocks</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B"><data-lsp lsp='const setBlocks: React.Dispatch&lt;React.SetStateAction&lt;string[]>>' >setBlocks</data-lsp></span><span style="color: #ABB2BF">] </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='function React.useState&lt;string[]>(initialState: string[] | (() => string[])): [string[], React.Dispatch&lt;React.SetStateAction&lt;string[]>>] (+1 overload)' >useState</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B"><data-lsp lsp='const blockColors: string[]' >blockColors</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(method) Array&lt;string>.slice(start?: number | undefined, end?: number | undefined): string[]' >slice</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">));</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">        &lt;&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E06C75"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                </span><span style="color: #D19A66"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.style?: React.CSSProperties | undefined' >style</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">{</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #E06C75"><data-lsp lsp='(property) StandardLonghandProperties&lt;string | number, string &amp; {}>.width?: Property.Width&lt;string | number> | undefined' >width</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">220</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #E06C75"><data-lsp lsp='(property) StandardLonghandProperties&lt;string | number, string &amp; {}>.height?: Property.Height&lt;string | number> | undefined' >height</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">180</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #E06C75"><data-lsp lsp='(property) StandardShorthandProperties&lt;string | number, string &amp; {}>.border?: Property.Border&lt;string | number> | undefined' >border</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;1px solid #000&apos;</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">                }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">            &gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Scroller({ contentRef, className, children, ...rest }: ScrollerProps): JSX.Element&#10;import Scroller' >Scroller</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) ScrollerProps.contentRef: React.RefObject&lt;HTMLDivElement>' >contentRef</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='const ref: React.MutableRefObject&lt;null>' >ref</data-lsp></span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #C678DD">{</span><span style="color: #E5C07B"><data-lsp lsp='const blocks: string[]' >blocks</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(method) Array&lt;string>.map&lt;JSX.Element>(callbackfn: (value: string, index: number, array: string[]) => JSX.Element, thisArg?: any): JSX.Element[]' >map</data-lsp></span><span style="color: #ABB2BF">((</span><span style="color: #E06C75"><data-lsp lsp='(parameter) color: string' >color</data-lsp></span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> (</span></div><div class='line'><span style="color: #ABB2BF">                        &lt;</span><span style="color: #E06C75"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                            </span><span style="color: #D19A66"><data-lsp lsp='(property) React.Attributes.key?: React.Key | null | undefined' >key</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(parameter) color: string' >color</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                            </span><span style="color: #D19A66"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.style?: React.CSSProperties | undefined' >style</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">{ </span><span style="color: #E06C75"><data-lsp lsp='(property) StandardShorthandProperties&lt;string | number, string &amp; {}>.background?: Property.Background&lt;string | number> | undefined' >background</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #E06C75"><data-lsp lsp='(parameter) color: string' >color</data-lsp></span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(property) StandardLonghandProperties&lt;string | number, string &amp; {}>.height?: Property.Height&lt;string | number> | undefined' >height</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">65</span><span style="color: #ABB2BF"> }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                        /&gt;</span></div><div class='line'><span style="color: #ABB2BF">                    ))</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                &lt;/</span><span style="color: #E5C07B"><data-lsp lsp='(alias) function Scroller({ contentRef, className, children, ...rest }: ScrollerProps): JSX.Element&#10;import Scroller' >Scroller</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E06C75"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;</span><span style="color: #E06C75"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.style?: React.CSSProperties | undefined' >style</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">{ </span><span style="color: #E06C75"><data-lsp lsp='(property) StandardLonghandProperties&lt;string | number, string &amp; {}>.display?: Property.Display | undefined' >display</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&apos;flex&apos;</span><span style="color: #ABB2BF">, </span><span style="color: #E06C75"><data-lsp lsp='(property) StandardLonghandProperties&lt;string | number, string &amp; {}>.paddingTop?: Property.PaddingTop&lt;string | number> | undefined' >paddingTop</data-lsp></span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">12</span><span style="color: #ABB2BF"> }</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.leftIcon?: Icon' >leftIcon</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(alias) const PlusIcon: Icon&#10;import PlusIcon' >PlusIcon</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(property) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #61AFEF"><data-lsp lsp='const setBlocks: (value: React.SetStateAction&lt;string[]>) => void' >setBlocks</data-lsp></span><span style="color: #ABB2BF">((</span><span style="color: #E06C75"><data-lsp lsp='(parameter) b: string[]' >b</data-lsp></span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='(parameter) b: string[]' >b</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(method) Array&lt;string>.concat(...items: ConcatArray&lt;string>[]): string[] (+1 overload)' >concat</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #E06C75"><data-lsp lsp='const blockColors: string[]' >blockColors</data-lsp></span><span style="color: #ABB2BF">));</span></div><div class='line'><span style="color: #ABB2BF">                    }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                /&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Gap: React.NamedExoticComponent&lt;GapProps>&#10;import Gap' >Gap</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #D19A66"><data-lsp lsp='(property) GapProps.size: number' >size</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #D19A66">8</span><span style="color: #C678DD">}</span><span style="color: #ABB2BF"> /&gt;</span></div><div class='line'><span style="color: #ABB2BF">                &lt;</span><span style="color: #E5C07B"><data-lsp lsp='(alias) const Button: React.ForwardRefExoticComponent&lt;ButtonProps &amp; React.RefAttributes&lt;HTMLButtonElement>>&#10;import Button' >Button</data-lsp></span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(property) ButtonProps.leftIcon?: Icon' >leftIcon</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #E06C75"><data-lsp lsp='(alias) const MinusIcon: Icon&#10;import MinusIcon' >MinusIcon</data-lsp></span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                    </span><span style="color: #D19A66"><data-lsp lsp='(property) onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #56B6C2">=</span><span style="color: #C678DD">{</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">                        </span><span style="color: #61AFEF"><data-lsp lsp='const setBlocks: (value: React.SetStateAction&lt;string[]>) => void' >setBlocks</data-lsp></span><span style="color: #ABB2BF">((</span><span style="color: #E06C75"><data-lsp lsp='(parameter) b: string[]' >b</data-lsp></span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">=&gt;</span></div><div class='line'><span style="color: #ABB2BF">                            </span><span style="color: #E5C07B"><data-lsp lsp='(parameter) b: string[]' >b</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF"><data-lsp lsp='(method) Array&lt;string>.slice(start?: number | undefined, end?: number | undefined): string[]' >slice</data-lsp></span><span style="color: #ABB2BF">(</span></div><div class='line'><span style="color: #ABB2BF">                                </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">                                </span><span style="color: #E5C07B"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #56B6C2"><data-lsp lsp='(method) Math.max(...values: number[]): number' >max</data-lsp></span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B"><data-lsp lsp='(parameter) b: string[]' >b</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(property) Array&lt;string>.length: number' >length</data-lsp></span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">-</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B"><data-lsp lsp='const blockColors: string[]' >blockColors</data-lsp></span><span style="color: #ABB2BF">.</span><span style="color: #E06C75"><data-lsp lsp='(property) Array&lt;string>.length: number' >length</data-lsp></span><span style="color: #ABB2BF">),</span></div><div class='line'><span style="color: #ABB2BF">                            ),</span></div><div class='line'><span style="color: #ABB2BF">                        );</span></div><div class='line'><span style="color: #ABB2BF">                    }</span><span style="color: #C678DD">}</span></div><div class='line'><span style="color: #ABB2BF">                /&gt;</span></div><div class='line'><span style="color: #ABB2BF">            &lt;/</span><span style="color: #E06C75"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #ABB2BF">&gt;</span></div><div class='line'><span style="color: #ABB2BF">        &lt;/&gt;</span></div><div class='line'><span style="color: #ABB2BF">    );</span></div><div class='line'><span style="color: #ABB2BF">};</span></div></code></div></pre>`,preview:async()=>{const{Scroller:c}=F,{Button:o}=b,{PlusIcon:B,MinusIcon:e}=g,{Gap:u}=D,i=["lavenderblush","ghostwhite","aliceblue","azure","honeydew","beige","oldlace","seashell","linen","mistyrose"];return()=>{const C=d.exports.useRef(null),[m,A]=d.exports.useState(i.slice(0,2));return t(v,{children:[s(l.div,{style:{width:220,height:180,border:"1px solid #000"},children:s(c,{contentRef:C,children:m.map(a=>s(l.div,{style:{background:a,height:65}},a))})}),t(l.div,{style:{display:"flex",paddingTop:12},children:[s(o,{leftIcon:B,onClick:()=>{A(a=>a.concat(i))}}),s(u,{size:8}),s(o,{leftIcon:e,onClick:()=>{A(a=>a.slice(0,Math.max(0,a.length-i.length)))}})]})]})}}})]})}}function R(n,p){throw new Error("Expected "+(p?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}export{_ as default};
